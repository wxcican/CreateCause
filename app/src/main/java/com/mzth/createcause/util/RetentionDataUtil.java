package com.mzth.createcause.util;import android.content.Context;import android.content.SharedPreferences;import android.support.annotation.Nullable;import java.util.Set;/** * Created by 本地保存参数工具 on 2017/8/17 0017. * * @author NightRain * @version 1.0.0 */public class RetentionDataUtil {    private SharedPreferences mSharedPreferences;    private static RetentionDataUtil mRetention;    private RetentionDataUtil() {    }    /**     * 获取本类对象     *     * @return Retention     */    public static RetentionDataUtil getRetention() {        if (mRetention == null) {            mRetention = new RetentionDataUtil();        }        return mRetention;    }    /**     * 初始化Context     *     * @param context context     */    public void initContext(Context context) {        if (context != null) {            mSharedPreferences = context.getSharedPreferences("user_util", Context.MODE_PRIVATE);        }    }    /**     * 保存String     *     * @param key   保存的Key     * @param value 保存的Value     * @returnV true 保存成功 false 保存失败     */    public boolean setString(String key, @Nullable String value) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().putString(key, value).commit();        }        return false;    }    /**     * 获取String     *     * @param key          保存时候的Key     * @param defaultValue 当获取不到是的默认值     * @return 返回获取的值或者默认值     */    public String getString(String key, @Nullable String defaultValue) {        if (mSharedPreferences != null) {            return mSharedPreferences.getString(key, defaultValue);        }        return defaultValue;    }    /**     * 保存Boolean     *     * @param key   保存的Key     * @param value 保存的Value     * @return true 保存成功 false 保存失败     */    public boolean setBoolean(String key, boolean value) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().putBoolean(key, value).commit();        }        return false;    }    /**     * 获取Boolean     *     * @param key          保存的Key     * @param defaultValue 当获取不到是的默认值     * @return 返回获取的值或者默认值     */    public boolean getBoolean(String key, boolean defaultValue) {        if (mSharedPreferences != null) {            return mSharedPreferences.getBoolean(key, defaultValue);        }        return defaultValue;    }    /**     * 保存Int     *     * @param key   保存的Key     * @param value 保存的Value     * @return 保存成功 false 保存失败     */    public boolean setInt(String key, int value) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().putInt(key, value).commit();        }        return false;    }    /**     * 获取Int     *     * @param key          保存的Key     * @param defaultValue 当获取不到是的默认值     * @return 返回获取的值或者默认值     */    public int getInt(String key, int defaultValue) {        if (mSharedPreferences != null) {            return mSharedPreferences.getInt(key, defaultValue);        }        return defaultValue;    }    /**     * 保存Float     *     * @param key   保存的Key     * @param value 保存的Value     * @return 保存成功 false 保存失败     */    public boolean setFloat(String key, float value) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().putFloat(key, value).commit();        }        return false;    }    /**     * 获取Float     *     * @param key          保存的Key     * @param defaultValue 当获取不到时的默认值     * @return 返回获取的值或者默认值     */    public Float getFloat(String key, float defaultValue) {        if (mSharedPreferences != null) {            return mSharedPreferences.getFloat(key, defaultValue);        }        return defaultValue;    }    /**     * 保存Long     *     * @param key   保存的Key     * @param value 保存的Value     * @return 保存成功 false 保存失败     */    public boolean setLong(String key, long value) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().putLong(key, value).commit();        }        return false;    }    /**     * 获取Long     *     * @param key          保存的Key     * @param defaultValue 当获取不到时的默认值     * @return 返回获取的值或者默认值     */    public Long getLong(String key, long defaultValue) {        if (mSharedPreferences != null) {            return mSharedPreferences.getLong(key, defaultValue);        }        return defaultValue;    }    /**     * 保存StringArray     *     * @param key   保存的Key     * @param value 保存的Value     * @return 保存成功 false 保存失败     */    public boolean setStringArray(String key, @Nullable Set<String> value) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().putStringSet(key, value).commit();        }        return false;    }    /**     * 获取StringArray     *     * @param key          保存的Key     * @param defaultValue 当获取不到时的默认值     * @return 返回获取的值或者默认值     */    public Set<String> getStringArray(String key, @Nullable Set<String> defaultValue) {        if (mSharedPreferences != null) {            return mSharedPreferences.getStringSet(key, defaultValue);        }        return defaultValue;    }    /**     * 删除（按key删除）     *     * @param key 要删除值的key     * @return true 删除成功    false 删除失败     */    public boolean remove(String key) {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().remove(key).commit();        }        return false;    }    /**     * 删除（删除所有）     *     * @return true 删除成功    false 删除失败     */    public boolean remove() {        if (mSharedPreferences != null) {            return mSharedPreferences.edit().clear().commit();        }        return false;    }}