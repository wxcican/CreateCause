package com.mzth.createcause.util;import android.app.Activity;import android.app.Dialog;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.Rect;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Environment;import android.provider.MediaStore;import android.support.annotation.IdRes;import android.support.annotation.LayoutRes;import android.text.TextUtils;import android.util.Log;import android.util.TypedValue;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.ViewTreeObserver;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.EditText;import android.widget.ImageView;import android.widget.PopupWindow;import android.widget.TextView;import android.widget.Toast;import com.mzth.createcause.R;import com.squareup.picasso.Picasso;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * Created by 常用工具 on 2017/8/21 0021. * * @author RightRain * @version 1.0.1 */public class CommonUtil {    //本类的对象    private static CommonUtil mCommUtil;    //上下文    private Context mContext;    //输入法管理器    private InputMethodManager mInputMethodManager;    //获取管理器    private List<Activity> mActivityMessage;    private Toast mToast;    /**     * 构造方法     */    private CommonUtil() {        mActivityMessage = new ArrayList<>();    }    /**     * 初始化Context     *     * @param context 上下文     */    public void initContext(Context context) {        if (context != null) {            this.mContext = context;            mInputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);        }    }    /**     * 获取本类的对象     *     * @return 类的对象     */    public static CommonUtil getCommonUtil() {        if (mCommUtil == null) {            mCommUtil = new CommonUtil();        }        return mCommUtil;    }    /**     * 找控件（View）     *     * @param view 当前控件衣服的View     * @param id   控件ID     * @return 返回当前ID的控件     */    public <T extends View> T bindView(View view, @IdRes int id) {        if (view != null) {            View viewByid = view.findViewById(id);            return (T) viewByid;        }        return null;    }    /**     * 找控件（Activity）     *     * @param activity 当前控件衣服的Activity     * @param id       控件ID     * @return 返回当前ID的控件     */    public <T extends View> T bindView(Activity activity, @IdRes int id) {        if (activity != null) {            View viewByid = activity.findViewById(id);            return (T) viewByid;        }        return null;    }    /**     * 尺寸转换     *     * @param value 设置的尺寸     * @return px尺寸值     */    public int convertDIP(float value) {        if (mContext != null) {            return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, value, mContext.getResources().getDisplayMetrics());        }        return 0;    }    /**     * 界面图层     *     * @param window 当前界面的window     * @param value  界面的透明情况（1完全透明）     */    public void setAttributes(Window window, float value) {        if (window != null) {            WindowManager.LayoutParams attributes = window.getAttributes();            attributes.alpha = value;            window.setAttributes(attributes);        }    }    /**     * 弹出软键盘     *     * @param mEditText 所依赖的输入框     */    public void showKeyBoard(EditText mEditText) {        if (mInputMethodManager != null) {            mEditText.setFocusable(true);            mEditText.setFocusableInTouchMode(true);            mEditText.requestFocus();            mInputMethodManager.showSoftInput(mEditText, InputMethodManager.RESULT_UNCHANGED_SHOWN);        }    }    /**     * 隐藏软键盘     *     * @param mEditText 所依赖的输入框     */    public void hiddenKeyBoard(EditText mEditText) {        if (mInputMethodManager != null) {            mEditText.setFocusable(true);            mEditText.setFocusableInTouchMode(true);            mEditText.requestFocus();            mInputMethodManager.showSoftInput(mEditText, InputMethodManager.RESULT_UNCHANGED_HIDDEN);        }    }    /**     * 普通吐司     *     * @param content 需要提示的内容     * @return Toast对象     */    public Toast toast(String content) {        if (mContext != null) {            if (!TextUtils.isEmpty(content)) {                if (mToast==null) {                    mToast = Toast.makeText(mContext,content, Toast.LENGTH_SHORT);                }                mToast.setText(content);                mToast.show();            }        }        return null;    }    /**     * //自定义显示位置     *     * @param content 需要提示的内容     * @param gravity 提示界面的在屏幕的位置     * @param xOffset X轴的偏移     * @param yOffset Y轴的偏移     * @return Toast对象     */    public Toast toast(String content, int gravity, int xOffset, int yOffset) {        if (mContext != null) {            if (!TextUtils.isEmpty(content)) {                Toast mToast = Toast.makeText(mContext, content, Toast.LENGTH_SHORT);                mToast.setGravity(gravity, xOffset, yOffset);                mToast.show();                return mToast;            }        }        return null;    }    /**     * 自定义界面（位置为自定义）     *     * @param resource 需要提示的界面     * @param gravity  提示界面的在屏幕的位置     * @param xOffset  X轴的偏移     * @param yOffset  Y轴的偏移     * @return Toast对象     */    public Toast toast(@LayoutRes int resource, int gravity, int xOffset, int yOffset) {        if (mContext != null) {            View view = LayoutInflater.from(mContext).inflate(resource, null);            Toast mToast = new Toast(mContext);            mToast.setDuration(Toast.LENGTH_SHORT);            mToast.setGravity(gravity, xOffset, yOffset);            mToast.setView(view);            mToast.show();            return mToast;        }        return null;    }    /**     * 自定义界面（位置为默认）     *     * @param resource 需要提示的界面     * @return Toast对象     */    public Toast toast(@LayoutRes int resource) {        if (mContext != null) {            View view = LayoutInflater.from(mContext).inflate(resource, null);            Toast mToast = new Toast(mContext);            mToast.setDuration(Toast.LENGTH_SHORT);            mToast.setView(view);            mToast.show();            return mToast;        }        return null;    }    /**     * 修改状态栏的状态     *     * @param Window 当前界面的window     * @param flag   true 隐藏   false 显示     */    public void modifyState(Window Window, boolean flag) {        if (Window != null) {            if (flag) {                WindowManager.LayoutParams lp = Window.getAttributes();                lp.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN;                Window.setAttributes(lp);                Window.addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);            } else {                WindowManager.LayoutParams attr = Window.getAttributes();                attr.flags &= (~WindowManager.LayoutParams.FLAG_FULLSCREEN);                Window.setAttributes(attr);                Window.clearFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);            }        }    }    /**     * Uri转换     *     * @param mFile 需要Uri的File     * @return 转换后的Uri     */    public Uri convertUri(File mFile) {        if (mFile != null && mContext != null) {            Uri uri;            if (android.os.Build.VERSION.SDK_INT < 24) {                uri = Uri.fromFile(mFile);            } else {                ContentValues contentValues = new ContentValues(1);                contentValues.put(MediaStore.Images.Media.DATA, mFile.getAbsolutePath());                uri = mContext.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);            }            return uri;        }        return null;    }    /**     * 添加一个活动到管理器     *     * @param mActivity 当前活动     */    public void addActivity(Activity mActivity) {        if (mActivityMessage != null) {            mActivityMessage.add(mActivity);            Log.i("MESSAGE", "当前活动" + mActivityMessage.size());        }    }    /**     * 从管理器删除一个活动     *     * @param mActivity 当前活动     */    public void delActivity(Activity mActivity) {        if (mActivityMessage != null) {            mActivityMessage.remove(mActivity);            Log.i("MESSAGE", "当前活动" + mActivityMessage.size());        }    }    /**     * 关闭所有活动     */    public void FinishAll() {        if (mActivityMessage != null) {            for (Activity mActivity : mActivityMessage) {                mActivity.finish();            }        }    }    /**     * 获取当前版本名称     *     * @return     * @throws PackageManager.NameNotFoundException     */    public String getversionName() throws PackageManager.NameNotFoundException {        String versionName = "1.0";        PackageInfo mPackageArchiveInfo = mContext.getPackageManager().getPackageInfo(mContext.getPackageName(), 0);        if (mPackageArchiveInfo != null) {            versionName = mPackageArchiveInfo.versionName;        }        return versionName;    }    /**     * 获取当前版本号     *     * @return     * @throws PackageManager.NameNotFoundException     */    public int getversionCound() throws PackageManager.NameNotFoundException {        int versionCound = 0;        PackageInfo mPackageArchiveInfo = mContext.getPackageManager().getPackageInfo(mContext.getPackageName(), 0);        if (mPackageArchiveInfo != null) {            versionCound = mPackageArchiveInfo.versionCode;        }        return versionCound;    }    /**     * 获取图片昵称     *     * @return 返回图片昵称     */    public String getPhotoFileName() {        Date date = new Date(System.currentTimeMillis());        SimpleDateFormat dateFormat = new SimpleDateFormat("'IMG'_yyyyMMdd_HHmmss");        return dateFormat.format(date) + "Q.jpg";    }    /**     * 获取视频昵称     *     * @return 返回视频昵称     */    public String getVideoFileName() {        Date date = new Date(System.currentTimeMillis());        SimpleDateFormat dateFormat = new SimpleDateFormat("'VIDEO'_yyyyMMdd_HHmmss");        return dateFormat.format(date) + "Q.mp4";    }    /**     * 图片压缩     *     * @param bitmap   原图     * @param fileName 自定义文件位置     * @return 返回压缩后的图片     */    public File compressImage(Bitmap bitmap, String fileName) {        ByteArrayOutputStream baos = new ByteArrayOutputStream();        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中        int options = 100;        Log.i("---------", "图片原始大小: " + baos.toByteArray().length);        while ((baos.toByteArray().length / 1024) > 500) {  //循环判断如果压缩后图片是否大于500kb,大于继续压缩            baos.reset();//重置baos即清空baos            options -= 5;//每次都减少10            bitmap.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中        }        Log.i("---------", "图片压缩大小: " + baos.toByteArray().length);        File file;        if (TextUtils.isEmpty(fileName)) {            file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), getPhotoFileName());        } else {            file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + fileName, getPhotoFileName());        }        try {            FileOutputStream fos = new FileOutputStream(file);            try {                fos.write(baos.toByteArray());                fos.flush();                fos.close();            } catch (IOException e) {                e.printStackTrace();            }        } catch (FileNotFoundException e) {            e.printStackTrace();        }        recycleBitmap(bitmap);        return file;    }    /**     * 释放资源     *     * @param bitmaps     */    private void recycleBitmap(Bitmap... bitmaps) {        if (bitmaps == null) {            return;        }        for (Bitmap bm : bitmaps) {            if (null != bm && !bm.isRecycled()) {                bm.recycle();            }        }    }    /**     * 图片裁剪     *     * @param uri      图片uri     * @param size     裁剪框大小     * @param request  请求码     * @param activity 当前Activity     */    public void startPhotoZoom(Uri uri, int size, int request, Activity activity) {        Intent intent = new Intent("com.android.camera.action.CROP");        intent.setDataAndType(uri, "image/*");        // crop为true是设置在开启的intent中设置显示的view可以剪裁        intent.putExtra("crop", "true");        // aspectX aspectY 是宽高的比例        intent.putExtra("aspectX", 1);        intent.putExtra("aspectY", 1);        // outputX,outputY 是剪裁图片的宽高        intent.putExtra("outputX", size);        intent.putExtra("outputY", size);        intent.putExtra("return-data", true);        activity.startActivityForResult(intent, request);    }    /**     * 弹出中间popupwindow     *     * @param context 上下文     * @param width   popupwindow宽度     * @param height  popupwindow高度     * @param view    弹出的界面     * @param fView   随意     */    public PopupWindow showPopupWindowIsCenter(Context context, View fView, int width, int height, View view, final Window window) {        PopupWindow mPopupWindow = new PopupWindow(context);        mPopupWindow.setFocusable(true);        mPopupWindow.setOutsideTouchable(true);        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());        mPopupWindow.setWidth(width);        mPopupWindow.setHeight(height);        mPopupWindow.setAnimationStyle(R.style.HintAnimation);        mPopupWindow.setContentView(view);        setAttributes(window, 0.5f);        mPopupWindow.showAtLocation(fView, Gravity.CENTER, 0, 0);        mPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {            @Override            public void onDismiss() {                setAttributes(window, 1f);            }        });        return mPopupWindow;    }    /**     * 弹出底部popupwindow     *     * @param context 上下文     * @param view    弹出的界面     * @param v       依附的界面  可不传     * @param window  当前视图     * @return 返回弹出的windwo     */    public PopupWindow showPopWindowIsButtom(Context context, View view, View v, final Window window) {        PopupWindow mPopupWindow = new PopupWindow(context);        mPopupWindow.setFocusable(true);        mPopupWindow.setOutsideTouchable(true);        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());        mPopupWindow.setWidth(ViewGroup.LayoutParams.MATCH_PARENT);        mPopupWindow.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());        mPopupWindow.setAnimationStyle(R.style.MyAnimation);        mPopupWindow.setContentView(view);        setAttributes(window, 0.5f);        mPopupWindow.showAtLocation(v, Gravity.BOTTOM, 0, 0);        mPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {            @Override            public void onDismiss() {                setAttributes(window, 1f);            }        });        return mPopupWindow;    }    public Dialog ejectLaoding(Context context,String hineContent){        View loadView = LayoutInflater.from(context).inflate(R.layout.item_loading, null);        TextView tv_util_loading_hine = loadView.findViewById(R.id.tv_util_loading_hine);        if (TextUtils.isEmpty(hineContent)) {            tv_util_loading_hine.setVisibility(View.GONE);        } else {            tv_util_loading_hine.setVisibility(View.VISIBLE);            tv_util_loading_hine.setText(hineContent);        }        Dialog mDialog = new Dialog(context, R.style.MyDialogStyle);        mDialog.setCancelable(false);        mDialog.setCanceledOnTouchOutside(false);        mDialog.setContentView(loadView);        mDialog.show();        return mDialog;    }}