package com.mzth.createcause.adapter.news;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Matrix;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.graphics.drawable.LevelListDrawable;import android.os.Environment;import android.text.Html;import android.text.TextUtils;import android.util.DisplayMetrics;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Switch;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.bumptech.glide.request.target.SimpleTarget;import com.bumptech.glide.request.transition.Transition;import com.chad.library.adapter.base.BaseMultiItemQuickAdapter;import com.chad.library.adapter.base.BaseViewHolder;import com.mzth.createcause.R;import com.mzth.createcause.entity.core.NewsInfoEntity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.view.fragment.news.IMoreCollectShareListener;import com.mzth.createcause.view.fragment.news.impl.ReleaseUserInfoActivity;import com.squareup.picasso.Picasso;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.List;/** * Created by 资讯详情适配器 on 2017/10/27 0027. */public class NewsInfoAdapter extends BaseMultiItemQuickAdapter<NewsInfoEntity, BaseViewHolder> {    private List<NewsInfoEntity> mNewsInfoEntitys;    /**     * Same as QuickAdapter#QuickAdapter(Context,int) but with     * some initialization data.     *     * @param data A new list is created out of this one to avoid mutable list     */    public NewsInfoAdapter(List<NewsInfoEntity> data) {        super(data);        mNewsInfoEntitys = data;        addItemType(NewsInfoEntity.TYPE_USER, R.layout.item_news_content);        addItemType(NewsInfoEntity.TYPE_NAVIGATION, R.layout.item_news_title);        addItemType(NewsInfoEntity.TYPE_RECOMMEND, R.layout.item_news_about);        addItemType(NewsInfoEntity.TYPE_COMMEND, R.layout.item_news_comment);        addItemType(NewsInfoEntity.TYPE_REPLY, R.layout.item_news_reply);        addItemType(NewsInfoEntity.TYPE_MORE, R.layout.item_news_findall);        addItemType(NewsInfoEntity.TYPE_EDIT, R.layout.item_news_comment_et);    }    @Override    protected void convert(final BaseViewHolder helper, final NewsInfoEntity item) {        switch (helper.getItemViewType()) {            case NewsInfoEntity.TYPE_USER:                TextView tv_item_news_info_title_content = helper.getView(R.id.tv_item_news_info_title_content);                tv_item_news_info_title_content.setText(Html.fromHtml(item.getUserContent(), new URLImageParser(mContext, tv_item_news_info_title_content), null));                helper.setText(R.id.tv_item_news_info_title_1, item.getUserTitle());                helper.setText(R.id.tv_item_news_info_title_2, item.getUserName());                helper.setText(R.id.tv_item_news_info_title_3, item.getUserTime() + "\u3000" + item.getUserComment() + "条评论");                ImageView iv_item_news_info_title_1 = helper.getView(R.id.iv_item_news_info_title_1);                Glide.with(mContext)                        .load(item.getUserImg())                        .apply(RequestOptions.centerInsideTransform()                                .error(R.drawable.icon_r_def)                                .placeholder(R.drawable.icon_r_def)                                .fallback(R.drawable.icon_r_def)                                .centerCrop()                        )                        .into(iv_item_news_info_title_1);                helper.getView(R.id.ll_item_news_info_userinfo).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if(onAuthorInfoClickListener!=null){                            onAuthorInfoClickListener.onAuthorInfoClick(item.getUserID());                        }                    }                });                break;            case NewsInfoEntity.TYPE_NAVIGATION:                helper.setText(R.id.tv_item_news_info_T, item.getNaviGation());                break;            case NewsInfoEntity.TYPE_RECOMMEND:                helper.setText(R.id.tv_item_news_info_1, item.getRecommendTitle());                helper.setText(R.id.tv_item_news_info_2, item.getRecommendType() + "\u3000" + item.getRecommendComment() + "评论\u3000" + item.getRecommendTime());                String recommendImg = item.getRecommendImg();                ImageView iv_item_news_info_1 = helper.getView(R.id.iv_item_news_info_1);                Glide.with(mContext)                        .load(recommendImg)                        .apply(RequestOptions.centerInsideTransform()                                .error(R.drawable.icon_default)                                .placeholder(R.drawable.icon_default)                                .fallback(R.drawable.icon_default)                                .centerCrop()                        )                        .into(iv_item_news_info_1);                helper.getView(R.id.ll_item_news_info_about).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onRecommendClickListener != null) {                            onRecommendClickListener.onRecommendClick(item.getRecommendId());                        }                    }                });                break;            case NewsInfoEntity.TYPE_COMMEND:                //头像                ImageView iv_item_item_news_info_comment_1 = helper.getView(R.id.iv_item_item_news_info_comment_1);                Glide.with(mContext)                        .load(item.getCommentImg())                        .apply(RequestOptions.centerInsideTransform()                                .error(R.drawable.icon_r_def)                                .placeholder(R.drawable.icon_r_def)                                .fallback(R.drawable.icon_r_def)                                .centerCrop())                        .into(iv_item_item_news_info_comment_1);                if (item.getCommentGood() == 1) {                    helper.setImageResource(R.id.iv_item_item_news_info_comment_2, R.drawable.icon_praise);                } else {                    helper.setImageResource(R.id.iv_item_item_news_info_comment_2, R.drawable.icon_no_praise);                }                //昵称                helper.setText(R.id.tv_item_item_news_info_comment_1, item.getCommentName());                //时间和回复量                helper.setText(R.id.tv_item_item_news_info_comment_2, item.getCommentTime() + "\u3000" + item.getCommentReplyNum() + "条回复");                //点赞量                helper.setText(R.id.tv_item_item_news_info_comment_3, item.getCommentGoodNum());                //内容                helper.setText(R.id.tv_item_item_news_info_comment_4, item.getCommentContent());                //回复                helper.getView(R.id.ll_item_item_news_info_comment).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onReplyClickListener != null) {                            onReplyClickListener.onReplyClick(item.getCommentId(), item.getCommentUserId(), item.getCommentName());                        }                    }                });                //点赞                final LinearLayout ll_item_item_news_info_good = helper.getView(R.id.ll_item_item_news_info_good);                ll_item_item_news_info_good.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        int good = Integer.parseInt(item.getCommentGoodNum());                        if (item.getCommentGood() == 1) {                            good--;                            helper.setImageResource(R.id.iv_item_item_news_info_comment_2, R.drawable.icon_no_praise);                            helper.setText(R.id.tv_item_item_news_info_comment_3, good + "");                        } else {                            good++;                            helper.setImageResource(R.id.iv_item_item_news_info_comment_2, R.drawable.icon_praise);                            helper.setText(R.id.tv_item_item_news_info_comment_3, good + "");                        }                        ll_item_item_news_info_good.setEnabled(false);                        if (onGoodClickListener != null) {                            onGoodClickListener.onGoodClick(item.getCommentId(), item.getCommentGood() == 1 ? "2" : "1", helper.getLayoutPosition());                        }                    }                });                break;            case NewsInfoEntity.TYPE_REPLY:                helper.setText(R.id.tv_item_news_info_reply_name, item.getReplyName());                helper.setText(R.id.tv_item_news_info_reply_content, item.getReplyContent());                break;            case NewsInfoEntity.TYPE_MORE:                TextView tv_item_news_info_find = helper.getView(R.id.tv_item_news_info_find);                String moreText = item.getMoreText();                if (moreText.equals("查看更多评论")) {                    tv_item_news_info_find.setTextColor(mContext.getResources().getColor(R.color.colorMain));                    //查看更多评论                    tv_item_news_info_find.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (onMoreCOmmentClickListener != null) {                                onMoreCOmmentClickListener.onMoreCOmmentClick();                            }                        }                    });                }                if (moreText.equals("暂无更多评论") || moreText.equals("暂无评论")) {                    tv_item_news_info_find.setTextColor(mContext.getResources().getColor(R.color.color_69));                    //查看更多评论                    tv_item_news_info_find.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            // CommonUtil.getCommonUtil().toast("没有更多评论");                        }                    });                }                tv_item_news_info_find.setText(moreText);                break;            case NewsInfoEntity.TYPE_EDIT:                //评论                helper.getView(R.id.et_item_news_info_et_et).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onCommentClickListener != null) {                            onCommentClickListener.onCommentClick();                        }                    }                });                //更多评论                helper.getView(R.id.ll_item_news_info_et_more).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onMoreClickListener != null) {                            onMoreClickListener.onMoreClick();                        }                    }                });                //分享                helper.getView(R.id.ll_item_news_info_et_share).setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onShareClickListener != null) {                            onShareClickListener.onShareClick();                        }                    }                });                break;        }    }    public interface OnAuthorInfoClickListener {        void onAuthorInfoClick(String authorId);    }    public interface OnShareClickListener {        void onShareClick();    }    public interface OnMoreClickListener {        void onMoreClick();    }    public interface OnCommentClickListener {        void onCommentClick();    }    public interface OnReplyClickListener {        void onReplyClick(String commentID, String toUserId, String toUserName);    }    public interface OnGoodClickListener {        void onGoodClick(String commentID, String type, int position);    }    public interface OnRecommendClickListener {        void onRecommendClick(String newID);    }    public interface OnMoreCOmmentClickListener {        void onMoreCOmmentClick();    }    private OnMoreCOmmentClickListener onMoreCOmmentClickListener;    private OnCommentClickListener onCommentClickListener;    private OnReplyClickListener onReplyClickListener;    private OnGoodClickListener onGoodClickListener;    private OnRecommendClickListener onRecommendClickListener;    private OnMoreClickListener onMoreClickListener;    private OnShareClickListener onShareClickListener;    private OnAuthorInfoClickListener onAuthorInfoClickListener;    public void setOnAuthorInfoClickListener(OnAuthorInfoClickListener onAuthorInfoClickListener) {        this.onAuthorInfoClickListener = onAuthorInfoClickListener;    }    public void setOnShareClickListener(OnShareClickListener onShareClickListener) {        this.onShareClickListener = onShareClickListener;    }    public void setOnMoreClickListener(OnMoreClickListener onMoreClickListener) {        this.onMoreClickListener = onMoreClickListener;    }    public void setOnMoreCOmmentClickListener(OnMoreCOmmentClickListener onMoreCOmmentClickListener) {        this.onMoreCOmmentClickListener = onMoreCOmmentClickListener;    }    public void setOnCommentClickListener(OnCommentClickListener onCommentClickListener) {        this.onCommentClickListener = onCommentClickListener;    }    public void setOnReplyClickListener(OnReplyClickListener onReplyClickListener) {        this.onReplyClickListener = onReplyClickListener;    }    public void setOnGoodClickListener(OnGoodClickListener onGoodClickListener) {        this.onGoodClickListener = onGoodClickListener;    }    public void setOnRecommendClickListener(OnRecommendClickListener onRecommendClickListener) {        this.onRecommendClickListener = onRecommendClickListener;    }    //打开发布用户详情    private void openReleaseUserInfo(LinearLayout ll_item_news_info_userinfo) {        ll_item_news_info_userinfo.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent mIntent = new Intent();                mIntent.setClass(mContext, ReleaseUserInfoActivity.class);                mContext.startActivity(mIntent);            }        });    }    public class URLImageParser implements Html.ImageGetter {        private Context context;        private TextView tvContent;        private int actX;//实际的宽  放大缩小基于textview的宽度        private int actY;        public URLImageParser(Context context, TextView tvContent) {            this.context = context;            this.tvContent = tvContent;            //获取全屏大小            DisplayMetrics metrics = context.getResources().getDisplayMetrics();            //我的textview有左右留边  margin            actX = metrics.widthPixels - CommonUtil.getCommonUtil().convertDIP(20);            actY = metrics.heightPixels;        }        @Override        public Drawable getDrawable(String source) {            final URLDrawable urlDrawable = new URLDrawable();            Glide.with(context)                    .asBitmap()                    .load(source)                    .into(new SimpleTarget<Bitmap>() {                        @Override                        public void onResourceReady(Bitmap resource, Transition<? super Bitmap> transition) {                            int x = resource.getWidth();                            int y = resource.getHeight();                            if (x > actX || y > actY) {                                //进行等比例缩放程序                                Matrix matrix = new Matrix();                                matrix.postScale((float) (actX * 1.00 / x), (float) (actX * 1.00 / x));                                //长和宽放大缩小的比例                                resource = Bitmap.createBitmap(resource, 0, 0, x, y, matrix, true);                            }                            urlDrawable.bitmap = resource;                            urlDrawable.setBounds(0, 0, resource.getWidth(), resource.getHeight());                            tvContent.invalidate();                            tvContent.setText(tvContent.getText()); // 解决图文重叠                        }                    });            return urlDrawable;        }    }    private class URLDrawable extends BitmapDrawable {        protected Bitmap bitmap;        @Override        public void draw(Canvas canvas) {            if (bitmap != null) {                canvas.drawBitmap(bitmap, 0, 0, getPaint());            }        }    }    /**     * 修改点赞状态     *     * @param idGood     * @param position     */    public void modifyData(boolean idGood, int position) {        if (mNewsInfoEntitys != null) {            if (idGood) {                mNewsInfoEntitys.get(position).setCommentGood(1);                String commentGoodNum = mNewsInfoEntitys.get(position).getCommentGoodNum();                if (commentGoodNum != null) {                    int num = Integer.valueOf(commentGoodNum);                    mNewsInfoEntitys.get(position).setCommentGoodNum((num + 1) + "");                }            } else {                mNewsInfoEntitys.get(position).setCommentGood(0);                String commentGoodNum = mNewsInfoEntitys.get(position).getCommentGoodNum();                if (commentGoodNum != null) {                    int num = Integer.valueOf(commentGoodNum);                    mNewsInfoEntitys.get(position).setCommentGoodNum((num - 1) + "");                }            }        }    }}