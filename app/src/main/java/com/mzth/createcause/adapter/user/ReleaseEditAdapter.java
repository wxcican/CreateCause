package com.mzth.createcause.adapter.user;import android.graphics.Bitmap;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.chad.library.adapter.base.BaseMultiItemQuickAdapter;import com.chad.library.adapter.base.BaseQuickAdapter;import com.chad.library.adapter.base.BaseViewHolder;import com.mzth.createcause.R;import com.mzth.createcause.entity.user.EssayEditEntity;import com.squareup.picasso.Picasso;import java.io.File;import java.util.List;/** * Created by 图片模块适配器 on 2017/10/25 0025. */public class ReleaseEditAdapter extends BaseMultiItemQuickAdapter<EssayEditEntity, BaseViewHolder> {    private OnDeleteModularListener mOnDeleteModularListener;    private OnDownModularListener mOnDownModularListener;    private OnUpModularListener mOnUpModularListener;    private OnSelectImageListener mOnSelectImageListener;    private OnSelectVideoListener mOnSelectVideoListener;    /**     * Same as QuickAdapter#QuickAdapter(Context,int) but with     * some initialization data.     *     * @param data A new list is created out of this one to avoid mutable list     */    public ReleaseEditAdapter(List<EssayEditEntity> data) {        super(data);        addItemType(EssayEditEntity.ESSAY_VIDEO, R.layout.item_release_video);        addItemType(EssayEditEntity.ESSAY_TEXT, R.layout.item_release_text);        addItemType(EssayEditEntity.ESSAY_IMAGE, R.layout.item_release_pic);    }    @Override    protected void convert(final BaseViewHolder helper, final EssayEditEntity item) {        switch (helper.getItemViewType()) {            case EssayEditEntity.ESSAY_VIDEO:                //视频编辑框下移按钮                LinearLayout ll_item_user_release_video_dow = helper.getView(R.id.ll_item_user_release_video_dow);                //视频编辑框上移按钮                LinearLayout ll_item_user_release_video_up = helper.getView(R.id.ll_item_user_release_video_up);                //上传视频                TextView bt_item_user_release_edit_video = helper.getView(R.id.bt_item_user_release_edit_video);                final TextView tv_item_user_release_edit_video = helper.getView(R.id.tv_item_user_release_edit_video);                bt_item_user_release_edit_video.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnSelectVideoListener != null) {                            mOnSelectVideoListener.onSelectVideo(tv_item_user_release_edit_video, helper.getLayoutPosition());                        }                    }                });                if (item.isVideoDown()) {                    ll_item_user_release_video_dow.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_video_dow.setVisibility(View.GONE);                }                if (item.isVideoUp()) {                    ll_item_user_release_video_up.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_video_up.setVisibility(View.GONE);                }                break;            case EssayEditEntity.ESSAY_TEXT:                //文字编辑框的删除按钮                LinearLayout ll_item_user_release_text_del = helper.getView(R.id.ll_item_user_release_text_del);                //文字编辑框下移按钮                LinearLayout ll_item_user_release_text_dow = helper.getView(R.id.ll_item_user_release_text_dow);                //文字编辑框上移按钮                LinearLayout ll_item_user_release_text_up = helper.getView(R.id.ll_item_user_release_text_up);                final EditText et_item_user_release_edit_text = helper.getView(R.id.et_item_user_release_edit_text);                et_item_user_release_edit_text.setText(item.getTextContent());                if (item.isTextDel()) {                    ll_item_user_release_text_del.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_text_del.setVisibility(View.GONE);                }                if (item.isTextoDown()) {                    ll_item_user_release_text_dow.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_text_dow.setVisibility(View.GONE);                }                if (item.isTextUp()) {                    ll_item_user_release_text_up.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_text_up.setVisibility(View.GONE);                }                //删除模块                ll_item_user_release_text_del.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnDeleteModularListener != null) {                            mOnDeleteModularListener.onDeleteModeuar(helper.getLayoutPosition());                        }                    }                });                //下移                ll_item_user_release_text_dow.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnDownModularListener != null) {                            mOnDownModularListener.onDownModeuar(helper.getLayoutPosition());                        }                    }                });                //上移                ll_item_user_release_text_up.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnUpModularListener != null) {                            mOnUpModularListener.onUpModeuar(helper.getLayoutPosition());                        }                    }                });                //输入                et_item_user_release_edit_text.setOnFocusChangeListener(new View.OnFocusChangeListener() {                    @Override                    public void onFocusChange(View v, boolean hasFocus) {                        if (!hasFocus) {                            item.setTextContent(et_item_user_release_edit_text.getText().toString().trim());                        }                    }                });                break;            case EssayEditEntity.ESSAY_IMAGE:                //图片编辑框删除按钮                LinearLayout ll_item_user_release_pic_del = helper.getView(R.id.ll_item_user_release_pic_del);                //图片编辑框下移按钮                LinearLayout ll_item_user_release_picture_dow = helper.getView(R.id.ll_item_user_release_picture_dow);                //图片编辑框上移按钮                LinearLayout ll_item_user_release_picture_up = helper.getView(R.id.ll_item_user_release_picture_up);                //发布的图片                final ImageView iv_release_edit_img = helper.getView(R.id.iv_release_edit_img);                //图片                Glide.with(mContext)                        .load(item.getImagePath())                        .into(iv_release_edit_img);                if (item.isImageDel()) {                    ll_item_user_release_pic_del.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_pic_del.setVisibility(View.GONE);                }                if (item.isImageDown()) {                    ll_item_user_release_picture_dow.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_picture_dow.setVisibility(View.GONE);                }                if (item.isImageUp()) {                    ll_item_user_release_picture_up.setVisibility(View.VISIBLE);                } else {                    ll_item_user_release_picture_up.setVisibility(View.GONE);                }                //删除模块                ll_item_user_release_pic_del.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnDeleteModularListener != null) {                            mOnDeleteModularListener.onDeleteModeuar(helper.getLayoutPosition());                        }                    }                });                //下移                ll_item_user_release_picture_dow.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnDownModularListener != null) {                            mOnDownModularListener.onDownModeuar(helper.getLayoutPosition());                        }                    }                });                //上移                ll_item_user_release_picture_up.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnUpModularListener != null) {                            mOnUpModularListener.onUpModeuar(helper.getLayoutPosition());                        }                    }                });                //选择图片                iv_release_edit_img.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (mOnSelectImageListener != null) {                            mOnSelectImageListener.onSelectImage(iv_release_edit_img, helper.getLayoutPosition());                        }                    }                });                break;        }    }    public interface OnDeleteModularListener {        void onDeleteModeuar(int position);    }    public interface OnDownModularListener {        void onDownModeuar(int position);    }    public interface OnUpModularListener {        void onUpModeuar(int position);    }    public interface OnSelectImageListener {        void onSelectImage(ImageView imageView, int position);    }    public interface OnSelectVideoListener {        void onSelectVideo(TextView imageView, int position);    }    /**     * 删除模块按钮     *     * @param onDeleteModularListener     */    public void setOnDeleteModularListener(OnDeleteModularListener onDeleteModularListener) {        this.mOnDeleteModularListener = onDeleteModularListener;    }    /**     * 上移模块按钮     *     * @param onUpModularListener     */    public void setOnUpModularListener(OnUpModularListener onUpModularListener) {        this.mOnUpModularListener = onUpModularListener;    }    /**     * 下移模块按钮     *     * @param onDownModularListener     */    public void setOnDownModularListener(OnDownModularListener onDownModularListener) {        this.mOnDownModularListener = onDownModularListener;    }    /**     * 选择图片按钮     *     * @param onSelectImageListener     */    public void setOnSelectImageListener(OnSelectImageListener onSelectImageListener) {        this.mOnSelectImageListener = onSelectImageListener;    }    /**     * 视频选择     *     * @param onSelectVideoListener     */    public void setOnSelectVideoListener(OnSelectVideoListener onSelectVideoListener) {        this.mOnSelectVideoListener = onSelectVideoListener;    }}