package com.mzth.createcause.adapter.user;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import com.chad.library.adapter.base.BaseMultiItemQuickAdapter;import com.chad.library.adapter.base.BaseViewHolder;import com.mzth.createcause.R;import com.mzth.createcause.entity.ReleaseTypeMainEntity;import java.util.ArrayList;import java.util.List;/** * Created by Administrator on 2017/10/25 0025. */public class ReleaseTypeMinaAdapter extends BaseMultiItemQuickAdapter<ReleaseTypeMainEntity, BaseViewHolder> {    private OnVideoDownClickListener onVideoDownClickListener;    private OnVideoUpClickListener onVideoUpClickListener;    private OnTextDownClickListener onTextDownClickListener;    private OnTextUpClickListener onTextUpClickListener;    private OnTextDelClickListener onTextDelClickListener;    private OnPicDownClickListener onPicDownClickListener;    private OnPicUpClickListener onPicUpClickListener;    private OnPicDelClickListener onPicDelClickListener;    private OnVideoButClickListener onVideoButClickListener;    private List<ReleaseTypeMainEntity> data;   // private RecyclerView rv_item_user_release_edit_pic;    private EditText et_item_user_release_edit_text;    /**     * Same as QuickAdapter#QuickAdapter(Context,int) but with     * some initialization data.     *     * @param data A new list is created out of this one to avoid mutable list     */    public ReleaseTypeMinaAdapter(List<ReleaseTypeMainEntity> data) {        super(data);        this.data = data;        addItemType(ReleaseTypeMainEntity.TYPE_VIDEO, R.layout.item_release_video);        addItemType(ReleaseTypeMainEntity.TYPE_TEXT, R.layout.item_release_text);        addItemType(ReleaseTypeMainEntity.TYPE_PIC, R.layout.item_release_pic);    }    @Override    protected void convert(final BaseViewHolder helper, ReleaseTypeMainEntity item) {        switch (helper.getItemViewType()) {            case ReleaseTypeMainEntity.TYPE_VIDEO:                LinearLayout ll_item_user_release_video_dow = helper.getView(R.id.ll_item_user_release_video_dow);                LinearLayout ll_item_user_release_video_up = helper.getView(R.id.ll_item_user_release_video_up);                TextView bt_item_user_release_edit_video = helper.getView(R.id.bt_item_user_release_edit_video);                final TextView tv_item_user_release_edit_video = helper.getView(R.id.tv_item_user_release_edit_video);                initVisibility(helper.getLayoutPosition(), ll_item_user_release_video_dow, ll_item_user_release_video_up, null, data.size());                //上传视频                bt_item_user_release_edit_video.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onVideoButClickListener != null) {                            onVideoButClickListener.onClick(tv_item_user_release_edit_video);                        }                    }                });                //下移视频模块                ll_item_user_release_video_dow.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onVideoDownClickListener != null) {                            onVideoDownClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                //上移视频模块                ll_item_user_release_video_up.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onVideoUpClickListener != null) {                            onVideoUpClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                break;            case ReleaseTypeMainEntity.TYPE_TEXT:                LinearLayout ll_item_user_release_text_del = helper.getView(R.id.ll_item_user_release_text_del);                LinearLayout ll_item_user_release_text_dow = helper.getView(R.id.ll_item_user_release_text_dow);                LinearLayout ll_item_user_release_text_up = helper.getView(R.id.ll_item_user_release_text_up);                et_item_user_release_edit_text = helper.getView(R.id.et_item_user_release_edit_text);                initVisibility(helper.getLayoutPosition(), ll_item_user_release_text_dow, ll_item_user_release_text_up, ll_item_user_release_text_del, data.size());                if (helper.getLayoutPosition() == 0) {                }                if (helper.getLayoutPosition() == 0) {                }                if (helper.getLayoutPosition() == 0) {                }                //删除文本模块                ll_item_user_release_text_del.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onTextDelClickListener != null) {                            onTextDelClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                //下移文本模块                ll_item_user_release_text_dow.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onTextDownClickListener != null) {                            onTextDownClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                //上移文本模块                ll_item_user_release_text_up.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onTextUpClickListener != null) {                            onTextUpClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                break;            case ReleaseTypeMainEntity.TYPE_PIC:                LinearLayout ll_item_user_release_pic_del = helper.getView(R.id.ll_item_user_release_pic_del);                LinearLayout ll_item_user_release_picture_dow = helper.getView(R.id.ll_item_user_release_picture_dow);                LinearLayout ll_item_user_release_picture_up = helper.getView(R.id.ll_item_user_release_picture_up);           //    rv_item_user_release_edit_pic = helper.getView(R.id.rv_item_user_release_edit_pic);             //   ReleaseEditAdapter mReleaseEditAdapter = new ReleaseEditAdapter(new ArrayList<String>());             //   rv_item_user_release_edit_pic.setLayoutManager(new GridLayoutManager(mContext, 3));               // rv_item_user_release_edit_pic.setAdapter(mReleaseEditAdapter);             //   mReleaseEditAdapter.setEmptyView(LayoutInflater.from(mContext).inflate(R.layout.no_pic, null));                initVisibility(helper.getLayoutPosition(), ll_item_user_release_picture_dow, ll_item_user_release_picture_up, ll_item_user_release_pic_del, data.size());                //删除图片模块                ll_item_user_release_pic_del.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onPicDelClickListener != null) {                            onPicDelClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                //下移图片模块                ll_item_user_release_picture_dow.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onPicDownClickListener != null) {                            onPicDownClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                //上移图片模块                ll_item_user_release_picture_up.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (onPicUpClickListener != null) {                            onPicUpClickListener.onClick(helper.getLayoutPosition());                        }                    }                });                break;        }    }    /**     * 获取图片容器     *     * @return 有可能返回null     */    public RecyclerView getPicVessel() {       // return rv_item_user_release_edit_pic;        return null;    }    /**     * 获取输入框     *     * @return     */    public EditText getTextInPut() {        return et_item_user_release_edit_text;    }    /**     * 初始化移动按钮显示和隐藏问题     *     * @param position 位置     * @param down     向上按钮     * @param up       向下按钮     */    private void initVisibility(int position, LinearLayout down, LinearLayout up, LinearLayout del, int itemCound) {        if (itemCound == 1) {            if (position == 0) {                if (del != null) {                    del.setVisibility(View.GONE);                }                down.setVisibility(View.GONE);                up.setVisibility(View.GONE);            }        } else if (itemCound == 2) {            switch (position) {                case 0:                    down.setVisibility(View.VISIBLE);                    up.setVisibility(View.GONE);                    if (del != null) {                        del.setVisibility(View.VISIBLE);                    }                    break;                case 1:                    down.setVisibility(View.GONE);                    up.setVisibility(View.VISIBLE);                    if (del != null) {                        del.setVisibility(View.VISIBLE);                    }                    break;            }        } else {            switch (position) {                case 0:                    down.setVisibility(View.VISIBLE);                    up.setVisibility(View.GONE);                    if (del != null) {                        del.setVisibility(View.VISIBLE);                    }                    break;                case 1:                    down.setVisibility(View.VISIBLE);                    up.setVisibility(View.VISIBLE);                    if (del != null) {                        del.setVisibility(View.VISIBLE);                    }                    break;                case 2:                    down.setVisibility(View.GONE);                    up.setVisibility(View.VISIBLE);                    if (del != null) {                        del.setVisibility(View.VISIBLE);                    }                    break;            }        }    }    /**     * 上传视频监听     *     * @param onVideoButClickListener     */    public void setOnVideoButClickListener(OnVideoButClickListener onVideoButClickListener) {        this.onVideoButClickListener = onVideoButClickListener;    }    /**     * 视频下移监听     *     * @param onVideoDownClickListener     */    public void setOnVideoDownClickListener(OnVideoDownClickListener onVideoDownClickListener) {        this.onVideoDownClickListener = onVideoDownClickListener;    }    /**     * 视频上移监听     *     * @param onVideoUpClickListener     */    public void setOnVideoUpClickListener(OnVideoUpClickListener onVideoUpClickListener) {        this.onVideoUpClickListener = onVideoUpClickListener;    }    /**     * 文本下移监听     *     * @param onTextDownClickListener     */    public void setOnTextDownClickListener(OnTextDownClickListener onTextDownClickListener) {        this.onTextDownClickListener = onTextDownClickListener;    }    /**     * 文本上移监听     *     * @param onTextUpClickListener     */    public void setonTextUpClickListener(OnTextUpClickListener onTextUpClickListener) {        this.onTextUpClickListener = onTextUpClickListener;    }    /**     * 文本删除监听     *     * @param onTextDelClickListener     */    public void setOnTextDelClickListener(OnTextDelClickListener onTextDelClickListener) {        this.onTextDelClickListener = onTextDelClickListener;    }    /**     * 图片下移监听     *     * @param onPicDownClickListener     */    public void setOnPicDownClickListener(OnPicDownClickListener onPicDownClickListener) {        this.onPicDownClickListener = onPicDownClickListener;    }    /**     * 图片上移监听     *     * @param onPicUpClickListener     */    public void setOnPicUpClickListener(OnPicUpClickListener onPicUpClickListener) {        this.onPicUpClickListener = onPicUpClickListener;    }    /**     * 图片删除监听     *     * @param onPicDelClickListener     */    public void setOnPicDelClickListener(OnPicDelClickListener onPicDelClickListener) {        this.onPicDelClickListener = onPicDelClickListener;    }    public interface OnVideoButClickListener {        void onClick(TextView videoName);    }    public interface OnVideoDownClickListener {        void onClick(int position);    }    public interface OnVideoUpClickListener {        void onClick(int position);    }    public interface OnTextDownClickListener {        void onClick(int position);    }    public interface OnTextUpClickListener {        void onClick(int position);    }    public interface OnTextDelClickListener {        void onClick(int position);    }    public interface OnPicDownClickListener {        void onClick(int position);    }    public interface OnPicUpClickListener {        void onClick(int position);    }    public interface OnPicDelClickListener {        void onClick(int position);    }}