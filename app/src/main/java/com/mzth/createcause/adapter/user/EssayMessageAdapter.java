package com.mzth.createcause.adapter.user;import android.support.annotation.LayoutRes;import android.support.annotation.Nullable;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.chad.library.adapter.base.BaseMultiItemQuickAdapter;import com.chad.library.adapter.base.BaseQuickAdapter;import com.chad.library.adapter.base.BaseViewHolder;import com.mzth.createcause.R;import com.mzth.createcause.entity.user.EssayMessageEntity;import com.mzth.createcause.entity.user.EssayMessageEntity.EssayMessageList;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import static android.R.attr.data;import static com.mzth.createcause.R.id.iv_item_essay_draft_one_select;/** * Created by 文章管理实体类 on 2017/10/23 0023. */public class EssayMessageAdapter extends BaseQuickAdapter<EssayMessageList, BaseViewHolder> {    private List<EssayMessageList> data;    public EssayMessageAdapter(@Nullable List<EssayMessageList> data) {        super(R.layout.item_user_essay_one_select, data);        this.data=data;    }    @Override    protected void convert(BaseViewHolder helper, final EssayMessageList item) {        helper.setText(R.id.tv_essay_message_1, item.getTitle());        helper.setText(R.id.tv_essay_message_2, item.getCat_name() + "\u3000" + item.getComment() + "评论" + "\u3000" + item.getAdd_time());        ImageView iv_essay_message_1 = helper.getView(R.id.iv_essay_message_1);        final ImageView iv_item_essay_message_one_select = helper.getView(R.id.iv_item_essay_message_one_select);        LinearLayout ll_item_essay_message_one_select = helper.getView(R.id.ll_item_essay_message_one_select);        iv_item_essay_message_one_select.setSelected(item.isSelect());        Glide.with(mContext)                .load(item.getImage())                .apply(RequestOptions.centerInsideTransform()                        .centerCrop()                        .error(R.drawable.icon_default)                        .placeholder(R.drawable.icon_default)                        .fallback(R.drawable.icon_default)                )                .into(iv_essay_message_1);        //选中        ll_item_essay_message_one_select.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                item.setSelect(!iv_item_essay_message_one_select.isSelected());                iv_item_essay_message_one_select.setSelected(!iv_item_essay_message_one_select.isSelected());                if(mOnSelectMessageListener!=null){                    boolean status=false;                    for (int i = 0; i < data.size(); i++) {                        boolean select = data.get(i).isSelect();                        if(select){                            status=true;                        }else {                            status=false;                            break;                        }                    }                    mOnSelectMessageListener.onSelectMessage(status);                }            }        });        //下线        helper.getView(R.id.ll_right_ont).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(mOnCancelEssayMessageListener!=null){                    mOnCancelEssayMessageListener.onCancelEssayMessage(item.getId());                }            }        });    }    public interface OnCancelEssayMessageListener{        void onCancelEssayMessage(String essayId);    }    public interface OnSelectMessageListener{        void onSelectMessage(boolean selectStatus);    }    private OnSelectMessageListener mOnSelectMessageListener;    private OnCancelEssayMessageListener mOnCancelEssayMessageListener;    public void setOnCancelEssayMessageListener(OnCancelEssayMessageListener onCancelEssayMessageListener){        this.mOnCancelEssayMessageListener=onCancelEssayMessageListener;    }    public void setOnSelectListener(OnSelectMessageListener onSelectMessageListener){        this.mOnSelectMessageListener=onSelectMessageListener;    }    /*//当前可见的ImagView    private List<ImageView> mAllImageView = new ArrayList<>();    //已选中的position的记录器    private List<String> mSelectNum = new ArrayList<>();    //记录选择状态的记录器    private Map<Integer, Boolean> mMap = new HashMap<>();    //下线字体状态监听    private OnSelectStatusListener onSelectStatusListener;    *//**     * Same as QuickAdapter#QuickAdapter(Context,int) but with     * some initialization data.     *     * @param data A new list is created out of this one to avoid mutable list     *//*    public EssayMessageAdapter(List<EssayMessageEntity> data) {        super(data);        addItemType(EssayMessageEntity.TYPE_ONE, R.layout.item_user_essay_one_select);        addItemType(EssayMessageEntity.TYPE_THREE, R.layout.item_user_essay_three_select);        for (int i = 0; i < data.size(); i++) {            mMap.put(i, false);        }    }    @Override    protected void convert(final BaseViewHolder helper, EssayMessageEntity item) {        switch (helper.getItemViewType()) {            case EssayMessageEntity.TYPE_ONE:                LinearLayout ll_item_essay_message_one_select = helper.getView(R.id.ll_item_essay_message_one_select);                final ImageView iv_item_essay_message_one_select = helper.getView(R.id.iv_item_essay_message_one_select);                //将当前可见的ImageView添加进去                mAllImageView.add(iv_item_essay_message_one_select);                //初始化选中的状态                iv_item_essay_message_one_select.setSelected(mMap.get(helper.getLayoutPosition()));                //选择框的监听                ll_item_essay_message_one_select.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (iv_item_essay_message_one_select.isSelected()) {//如果是选中状态                            //改变状态记录器中的状态                            mMap.put(helper.getLayoutPosition(), false);                            //将状态设为非选中                            iv_item_essay_message_one_select.setSelected(false);                            //将选中记录器中的数据删除                            mSelectNum.remove(String.valueOf(helper.getLayoutPosition()));                        } else {//如果是非选中状态                            //改变状态记录器中的状态                            mMap.put(helper.getLayoutPosition(), true);                            //将状态设为选中                            iv_item_essay_message_one_select.setSelected(true);                            //添加到选中记录器中                            mSelectNum.add(String.valueOf(helper.getLayoutPosition()));                        }                        //初始化Activity的状态                        isHaveSelect();                    }                });                break;            case EssayMessageEntity.TYPE_THREE:                LinearLayout ll_item_essay_message_three_select = helper.getView(R.id.ll_item_essay_message_three_select);                final ImageView iv_item_essay_message_three_select = helper.getView(R.id.iv_item_essay_message_three_select);                //将当前可见的ImageView添加进去                mAllImageView.add(iv_item_essay_message_three_select);                //初始化选中的状态                iv_item_essay_message_three_select.setSelected(mMap.get(helper.getLayoutPosition()));                //选择框的监听                ll_item_essay_message_three_select.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (iv_item_essay_message_three_select.isSelected()) {//如果是选中状态                            //改变状态记录器中的状态                            mMap.put(helper.getLayoutPosition(), false);                            //将状态设为非选中                            iv_item_essay_message_three_select.setSelected(false);                            //将选中记录器中的数据删除                            mSelectNum.remove(String.valueOf(helper.getLayoutPosition()));                        } else {//如果是非选中状态                            //改变状态记录器中的状态                            mMap.put(helper.getLayoutPosition(), true);                            //将状态设为选中                            iv_item_essay_message_three_select.setSelected(true);                            //添加到选中记录器中                            mSelectNum.add(String.valueOf(helper.getLayoutPosition()));                        }                        isHaveSelect();                    }                });                break;        }    }*/    /**     * Activiy选中状态接口     */   /* public interface OnSelectStatusListener {        *//**     * 是否有单个的选中     *     * @param status 选中的状态     *//*        void selectStatus(boolean status);        *//**     * 是否选中所有     *     * @param status 选中的状态     *//*        void selectStatusAll(boolean status);    }*/    /**     * 设置全选和单选状态改变监听     *     * @param onSelectStatusListener     */   /* public void setOnSelectStatusListener(OnSelectStatusListener onSelectStatusListener) {        this.onSelectStatusListener = onSelectStatusListener;    }*/    /**     * 获取选中的positon     *     * @return     */    /*public List<String> getSelectPosition() {        return mSelectNum;    }*/    /**     * 设置选中全部     *     * @param status true选中全部，false取消全部     */    /*public void setSelectAll(boolean status) {        //清空之前选择的position        mSelectNum.clear();        for (int i = 0; i < mMap.size(); i++) {            if (status) {                //将所有条目默认选中                mMap.put(i, true);                //将所有position添加进去                mSelectNum.add(String.valueOf(i));            } else {                //将所有条目默认非选中                mMap.put(i, false);            }        }        for (int j = 0; j < mAllImageView.size(); j++) {            if (status) {                //将所有UI设为选中                mAllImageView.get(j).setSelected(true);            } else {                //将所有UI设为非选中                mAllImageView.get(j).setSelected(false);            }        }        isHaveSelect();    }*/    /**     * 初始化Activity的状态     */    /*private void isHaveSelect() {        if (mSelectNum.size() == 0) {            if (onSelectStatusListener != null) {                onSelectStatusListener.selectStatus(false);                onSelectStatusListener.selectStatusAll(false);            }        } else {            if (onSelectStatusListener != null) {                if (mSelectNum.size() == mMap.size()) {                    onSelectStatusListener.selectStatusAll(true);                } else {                    onSelectStatusListener.selectStatusAll(false);                }                onSelectStatusListener.selectStatus(true);            }        }    }*/}