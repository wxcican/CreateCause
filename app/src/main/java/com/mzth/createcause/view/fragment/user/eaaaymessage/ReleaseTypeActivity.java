package com.mzth.createcause.view.fragment.user.eaaaymessage;import android.app.Dialog;import android.content.Intent;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import com.chad.library.adapter.base.BaseQuickAdapter;import com.lzy.okgo.OkGo;import com.lzy.okgo.cache.CacheMode;import com.lzy.okgo.callback.StringCallback;import com.lzy.okgo.model.Response;import com.lzy.okgo.request.base.Request;import com.mzth.createcause.R;import com.mzth.createcause.adapter.share.AllTypeAdapter;import com.mzth.createcause.adapter.user.ReleaseTypeAdapter;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.entity.ReleaseTypeEntity;import com.mzth.createcause.entity.core.CoreTypeEntity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.ConfigUtil;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;/** * 分类选择 */public class ReleaseTypeActivity extends BaseActivity {    private RecyclerView rv_user_relesse_type;    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    private List<CoreTypeEntity.InfromactionTypeList> mInfromactionTypeLists = new ArrayList<>();    private AllTypeAdapter mAllTypeAdapter;    private Dialog dialog;    @Override    protected void setActivity() {        setContentView(R.layout.activity_release_type);    }    @Override    protected void initView() {        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);        rv_user_relesse_type = CommonUtil.getCommonUtil().bindView(this, R.id.rv_user_relesse_type);    }    @Override    protected void initSet() {        base_title.setText("分类选择");        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.GONE);    }    @Override    protected void initAdapter() {        mAllTypeAdapter = new AllTypeAdapter(mInfromactionTypeLists);        GridLayoutManager mGridLayoutManager = new GridLayoutManager(mContext, 3);        rv_user_relesse_type.setLayoutManager(mGridLayoutManager);        rv_user_relesse_type.setAdapter(mAllTypeAdapter);        mAllTypeAdapter.setEmptyView(mNoDataView);    }    @Override    protected void initData() {        OkGo.<String>post(ConfigUtil.CORE_TYPE)                .params("user_id", userId)                .params("auth_key", userKey)                .cacheMode(CacheMode.FIRST_CACHE_THEN_REQUEST)                .execute(new StringCallback() {                    @Override                    public void onStart(Request<String, ? extends Request> request) {                        super.onStart(request);                        dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在加载");                    }                    @Override                    public void onFinish() {                        super.onFinish();                        if (dialog != null && dialog.isShowing()) {                            dialog.dismiss();                        }                    }                    @Override                    public void onError(Response<String> response) {                        super.onError(response);                        CommonUtil.getCommonUtil().toast("连接超时，请重试");                    }                    @Override                    public void onSuccess(Response<String> response) {                        try {                            CoreTypeEntity mInfromactionTypeEntity = new CoreTypeEntity(new JSONObject(response.body()));                            if (mInfromactionTypeEntity.getStatus() == 1) {                                mInfromactionTypeLists.clear();                                mInfromactionTypeLists.addAll(mInfromactionTypeEntity.getInfromactionTypeLists());                                mInfromactionTypeLists.remove(0);                                mAllTypeAdapter.notifyDataSetChanged();                            } else {                                CommonUtil.getCommonUtil().toast(mInfromactionTypeEntity.getErr_msg());                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });    }    @Override    protected void initListener() {        //item        mAllTypeAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {            @Override            public void onItemClick(BaseQuickAdapter adapter, View view, int position) {                Intent intent = new Intent();                intent.putExtra("RELEASE_TYPE",mInfromactionTypeLists.get(position).getCat_name());                intent.putExtra("RELEASE_ID",mInfromactionTypeLists.get(position).getId());                setResult(301, intent);                finish();            }        });    }}