package com.mzth.createcause.view.fragment.user.eaaaymessage;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.luck.picture.lib.PictureSelector;import com.luck.picture.lib.config.PictureConfig;import com.luck.picture.lib.config.PictureMimeType;import com.luck.picture.lib.entity.LocalMedia;import com.mzth.createcause.R;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.RetentionDataUtil;import java.io.File;import java.util.List;/** * 发布界面 */public class ReleaseActivity extends BaseActivity {    private final int FLAG_CAMERA = 100;    private final int FLAG_CUT = 300;    private final int FLAG_OPEN = 200;    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    //提交    private RelativeLayout base_rl;    //选择内容    private TextView tv_user_release_1;    //编辑类型    private TextView tv_user_release_2;    //是否编辑    private TextView tv_user_release_3;    //标题(一网资讯)    private EditText et_user_release_1;    //关键字    private EditText et_user_release_2;    //简介    private EditText et_user_release_3;    //标题(山西信息港)    private EditText et_user_release_4;    //分类    private LinearLayout ll_user_release_1;    //编辑    private LinearLayout ll_user_release_2;    //封面    private RelativeLayout rv_user_release_1;    //封面图片    private ImageView iv_user_release_1;    private PopupWindow mPopupWindow;    private File mCamera;    private PopupWindow mPicPop;    private File mCut;    private String release;    private String type_id;    private String imagePath;    @Override    protected void setActivity() {        setContentView(R.layout.activity_release);    }    @Override    protected void initView() {        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);        base_rl = CommonUtil.getCommonUtil().bindView(this, R.id.base_rl);        tv_user_release_1 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_release_1);        tv_user_release_2 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_release_2);        tv_user_release_3 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_release_3);        et_user_release_1 = CommonUtil.getCommonUtil().bindView(this, R.id.et_user_release_1);        et_user_release_2 = CommonUtil.getCommonUtil().bindView(this, R.id.et_user_release_2);        et_user_release_3 = CommonUtil.getCommonUtil().bindView(this, R.id.et_user_release_3);        et_user_release_4 = CommonUtil.getCommonUtil().bindView(this, R.id.et_user_release_4);        ll_user_release_1 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_release_1);        ll_user_release_2 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_release_2);        rv_user_release_1 = CommonUtil.getCommonUtil().bindView(this, R.id.rv_user_release_1);        iv_user_release_1 = CommonUtil.getCommonUtil().bindView(this, R.id.iv_user_release_1);    }    @Override    protected void initSet() {        release = getIntent().getStringExtra("Release");        if (release.equals(RELEASE_ESSAY)) {            //文章            base_title.setText("发布文章");            tv_user_release_2.setText("编辑文章");        } else if (release.equals(RELEASE_VIDEO)) {            //视频            base_title.setText("发布视频");            tv_user_release_2.setText("编辑视频");        }        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.VISIBLE);        base_tv.setText("提交");    }    @Override    protected void initAdapter() {    }    @Override    protected void initData() {    }    @Override    protected void initListener() {        //封面        rv_user_release_1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                PictureSelector.create(ReleaseActivity.this)                        //选择类型                        .openGallery(PictureMimeType.ofImage())                        //多选或者单选PictureConfig.SINGLE                        .selectionMode(PictureConfig.SINGLE)                        //是否裁剪                        .enableCrop(true)// 是否裁剪 true or false                        .withAspectRatio(480, 330)                        .circleDimmedLayer(false)                        .showCropFrame(true)// 是否显示裁剪矩形边框 圆形裁剪时建议设为false   true or false                        .showCropGrid(true)// 是否显示裁剪矩形网格 圆形裁剪时建议设为false    true or false                        //是否压缩                        .compress(true)                        //压缩方式                        .compressMode(PictureConfig.SYSTEM_COMPRESS_MODE)                        //结果回调码                        .forResult(PictureConfig.CHOOSE_REQUEST);            }        });        //分类        ll_user_release_1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                openReleaseTypeActivity();            }        });        //编辑        ll_user_release_2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                openReleaseEdit();            }        });        //提交        base_rl.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String title1 = et_user_release_1.getText().toString().trim();                String keyWord = et_user_release_2.getText().toString().trim();                String desc = et_user_release_3.getText().toString().trim();                String title2 = et_user_release_4.getText().toString().trim();                String rContent = RetentionDataUtil.getRetention().getString("RELEASE_CONTENT", "");                if (TextUtils.isEmpty(title1)) {                    CommonUtil.getCommonUtil().toast("请输入一网资讯标题");                } else if (TextUtils.isEmpty(title2)) {                    CommonUtil.getCommonUtil().toast("请输入山西信息港标题");                } else if (TextUtils.isEmpty(keyWord)) {                    CommonUtil.getCommonUtil().toast("请输入搜索关键字");                } else if (TextUtils.isEmpty(desc)) {                    CommonUtil.getCommonUtil().toast("请输入简介");                } else if (TextUtils.isEmpty(imagePath)) {                    CommonUtil.getCommonUtil().toast("请上传封面图");                } else if (TextUtils.isEmpty(rContent)) {                    CommonUtil.getCommonUtil().toast("请编辑文章");                } else {                    if (release.equals(RELEASE_ESSAY)) {                        ReleaseUtil.getReleaseUtil().actionRequestEssay(                                ReleaseActivity.this,                                "",                                userId,                                userKey,                                type_id,                                title1 + "*_*" + title2,                                keyWord,                                desc,                                rContent,                                "1",                                imagePath,                                ""                        );                    }                    if (release.equals(RELEASE_VIDEO)) {                        ReleaseUtil.getReleaseUtil().actionRequestEssay(                                ReleaseActivity.this,                                "",                                userId,                                userKey,                                type_id,                                title1 + "*_*" + title2,                                keyWord,                                desc,                                rContent,                                "2",                                imagePath,                                RetentionDataUtil.getRetention().getString("RELEASE_CONTENT_VIDEO", "")                        );                    }                }            }        });    }    //打开编辑界面    private void openReleaseEdit() {        Intent mIntent = new Intent();        mIntent.setClass(mContext, ReleaseEditActivity.class);        if (release.equals(RELEASE_ESSAY)) {            mIntent.putExtra("releaseEdit", RELEASE_ESSAY);        } else if (release.equals(RELEASE_VIDEO)) {            mIntent.putExtra("releaseEdit", RELEASE_VIDEO);        }        startActivityForResult(mIntent, 300);    }    //打开分类界面    private void openReleaseTypeActivity() {        Intent mIntent = new Intent();        mIntent.setClass(mContext, ReleaseTypeActivity.class);        startActivityForResult(mIntent, 300);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == 300) {            switch (resultCode) {                case 301:                    tv_user_release_1.setText(data.getStringExtra("RELEASE_TYPE"));                    type_id = data.getStringExtra("RELEASE_ID");                    break;                case 302:                    tv_user_release_3.setText("已编辑");                    break;                case 303:                    tv_user_release_3.setText("未编辑");                    break;            }        }        if (resultCode == RESULT_OK) {            switch (requestCode) {                case PictureConfig.CHOOSE_REQUEST:                    // 图片选择结果回调                    List<LocalMedia> selectList = PictureSelector.obtainMultipleResult(data);                    // 例如 LocalMedia 里面返回三种path                    // 1.media.getPath(); 为原图path                    // 2.media.getCutPath();为裁剪后path，需判断media.isCut();是否为true                    // 3.media.getCompressPath();为压缩后path，需判断media.isCompressed();是否为true                    // 如果裁剪并压缩了，以取压缩路径为准，因为是先裁剪后压缩的                    for (int i = 0; i < selectList.size(); i++) {                        //封面图片路径                        String imgCover = selectList.get(i).getCompressPath();                        Glide.with(mContext)                                .load(imgCover)                                .apply(RequestOptions.centerInsideTransform()                                        .error(R.drawable.icon_default)                                        .placeholder(R.drawable.icon_default)                                        .centerCrop()                                        .fallback(R.drawable.icon_default)                                )                                .into(iv_user_release_1);                        ReleaseUtil releaseUtil = ReleaseUtil.getReleaseUtil();                        releaseUtil.actionRequestImg(ReleaseActivity.this, userId, userKey, imgCover);                        releaseUtil.setOnCoverSelectListener(new ReleaseUtil.OnCoverSelectListener() {                            @Override                            public void onCoverSelect(String path) {                                imagePath = path;                            }                        });                    }                    break;            }        }    }}