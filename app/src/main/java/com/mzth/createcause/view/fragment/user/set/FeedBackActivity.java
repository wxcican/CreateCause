package com.mzth.createcause.view.fragment.user.set;import android.app.Dialog;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import com.chad.library.adapter.base.BaseQuickAdapter;import com.luck.picture.lib.PictureSelector;import com.luck.picture.lib.config.PictureConfig;import com.luck.picture.lib.config.PictureMimeType;import com.luck.picture.lib.entity.LocalMedia;import com.luck.picture.lib.tools.DebugUtil;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.lzy.okgo.model.Response;import com.lzy.okgo.request.base.Request;import com.mzth.createcause.R;import com.mzth.createcause.adapter.user.FeedBackAdapter;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.entity.FeedBackEntity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.ConfigUtil;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.util.ArrayList;import java.util.List;/** * 意见反馈 */public class FeedBackActivity extends BaseActivity {    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    private TextView btn_feed;    private EditText et_feed_back;    private RecyclerView rv_user_set_feed_back;    private List<FeedBackEntity> mFeedBackEntitys = new ArrayList<>();    private FeedBackAdapter mFeedBackAdapter;    private List<String> mImgs = new ArrayList<>();    private List<LocalMedia> mLocalMedias = new ArrayList<>();    private Dialog dialog;    @Override    protected void setActivity() {        setContentView(R.layout.activity_feed_back);    }    @Override    protected void initView() {        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);        rv_user_set_feed_back = CommonUtil.getCommonUtil().bindView(this, R.id.rv_user_set_feed_back);        btn_feed = CommonUtil.getCommonUtil().bindView(this, R.id.btn_feed);        et_feed_back = CommonUtil.getCommonUtil().bindView(this, R.id.et_feed_back);    }    @Override    protected void initSet() {        base_title.setText("意见反馈");        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.GONE);    }    @Override    protected void initAdapter() {    }    @Override    protected void initData() {        FeedBackEntity mFeedBackEntity = new FeedBackEntity(FeedBackEntity.DEFAULT_IMG);        mFeedBackEntity.setDenfultImg(R.drawable.default_add);        mFeedBackEntitys.add(mFeedBackEntity);        mFeedBackAdapter = new FeedBackAdapter(mFeedBackEntitys);        rv_user_set_feed_back.setLayoutManager(new GridLayoutManager(mContext, 4));        rv_user_set_feed_back.setAdapter(mFeedBackAdapter);        mFeedBackAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {            @Override            public void onItemClick(BaseQuickAdapter adapter, View view, int position) {                if (position == mFeedBackEntitys.size() - 1) {                    PictureSelector.create(FeedBackActivity.this)                            //选择类型                            .openGallery(PictureMimeType.ofImage())                            .selectionMedia(mLocalMedias)                            // 每行显示个数 in                            .imageSpanCount(4)                            .previewImage(true)                            //多选或者单选PictureConfig.SINGLE                            .selectionMode(PictureConfig.MULTIPLE)                            //是否压缩                            .compress(true)                            //压缩方式                            .compressMode(PictureConfig.SYSTEM_COMPRESS_MODE)                            //结果回调码                            .forResult(PictureConfig.CHOOSE_REQUEST);                }            }        });    }    @Override    protected void initListener() {        //提交        btn_feed.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String context = et_feed_back.getText().toString().trim();                List<File> mFiles=new ArrayList<File>();                for (int i = 0; i < mFeedBackEntitys.size(); i++) {                    FeedBackEntity feedBackEntity = mFeedBackEntitys.get(i);                    String imgPath = feedBackEntity.getImgPath();                    if(!TextUtils.isEmpty(imgPath)){                        mFiles.add(new File(imgPath));                    }                }                if(TextUtils.isEmpty(context)){                    CommonUtil.getCommonUtil().toast("请描述您要反馈的内容");                }else {                    OkGo.<String>post(ConfigUtil.SET_SUGGEST)                            .params("content",context)                            .params("user_id",userId)                            .params("auth_key",userKey)                            .addFileParams("image[]",mFiles)                            .execute(new StringCallback() {                                @Override                                public void onStart(Request<String, ? extends Request> request) {                                    super.onStart(request);                                    dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在提交");                                }                                @Override                                public void onError(Response<String> response) {                                    super.onError(response);                                    CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                                }                                @Override                                public void onFinish() {                                    super.onFinish();                                    if(dialog!=null&&dialog.isShowing()){                                        dialog.dismiss();                                        dialog=null;                                    }                                }                                @Override                                public void onSuccess(Response<String> response) {                                    try {                                        JSONObject mJSONObject=new JSONObject(response.body());                                        if(mJSONObject.optInt("status")==1){                                            finish();                                        }else {                                            CommonUtil.getCommonUtil().toast(mJSONObject.optString("err_msg"));                                        }                                    } catch (JSONException e) {                                        e.printStackTrace();                                    }                                }                            });                }            }        });    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            switch (requestCode) {                case PictureConfig.CHOOSE_REQUEST:                    mImgs.clear();                    mFeedBackEntitys.clear();                    /*for (int i = 0; i < mFeedBackEntitys.size(); i++) {                        if(i!=(mFeedBackEntitys.size()-1)){                            mFeedBackEntitys.remove(i);                        }                    }*/                    // 图片选择结果回调                    List<LocalMedia> localMedias = PictureSelector.obtainMultipleResult(data);                    // 例如 LocalMedia 里面返回三种path                    // 1.media.getPath(); 为原图path                    // 2.media.getCutPath();为裁剪后path，需判断media.isCut();是否为true                    // 3.media.getCompressPath();为压缩后path，需判断media.isCompressed();是否为true                    // 如果裁剪并压缩了，以取压缩路径为准，因为是先裁剪后压缩的                    mLocalMedias.clear();                    mLocalMedias.addAll(localMedias);                    int i = 0;                    for (i = 0; i < localMedias.size(); i++) {                        LocalMedia localMedia = localMedias.get(i);                        mImgs.add(localMedia.getPath());                        //压缩后的路劲                        if (localMedia.isCompressed()) {                            String compressPath = localMedia.getCompressPath();                            FeedBackEntity mFeedBackEntity = new FeedBackEntity(FeedBackEntity.SELECT_IMG);                            mFeedBackEntity.setImgPath(compressPath);                            mFeedBackEntitys.add(i, mFeedBackEntity);                        }                    }                    FeedBackEntity mFeedBackEntityd = new FeedBackEntity(FeedBackEntity.DEFAULT_IMG);                    mFeedBackEntityd.setDenfultImg(R.drawable.default_add);                    mFeedBackEntitys.add(i, mFeedBackEntityd);                    mFeedBackAdapter.notifyDataSetChanged();                    //PictureFileUtils.deleteCacheDirFile(MainActivity.this);                    break;            }        }    }}