package com.mzth.createcause.view.login;import android.app.Dialog;import android.content.Intent;import android.graphics.drawable.BitmapDrawable;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.EditText;import android.widget.ImageView;import android.widget.PopupWindow;import android.widget.TextView;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.lzy.okgo.model.Response;import com.lzy.okgo.request.base.Request;import com.mzth.createcause.R;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.entity.login.LoginEntity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.ConfigUtil;import com.mzth.createcause.util.RetentionDataUtil;import com.umeng.socialize.UMAuthListener;import com.umeng.socialize.UMShareAPI;import com.umeng.socialize.bean.SHARE_MEDIA;import org.json.JSONException;import org.json.JSONObject;import java.util.Map;/** * Created by Administrator on 2017/10/10 0010. */public class LoginActivity extends BaseActivity {    //登录    private TextView tv_login;    private EditText et_login_name;    private EditText et_login_pwd;    private Dialog dialog;    private String type;    private ImageView iv_login_wx;    private UMShareAPI mShareAPI = null;    @Override    protected void setActivity() {        setContentView(R.layout.activity_login);        mShareAPI = UMShareAPI.get(this);    }    @Override    protected void initView() {        tv_login = CommonUtil.getCommonUtil().bindView(this, R.id.tv_login);        et_login_name = CommonUtil.getCommonUtil().bindView(this, R.id.et_login_name);        et_login_pwd = CommonUtil.getCommonUtil().bindView(this, R.id.et_login_pwd);        iv_login_wx = CommonUtil.getCommonUtil().bindView(this, R.id.iv_login_wx);    }    @Override    protected void initSet() {        et_login_name.setText(RetentionDataUtil.getRetention().getString("userPhone", ""));        et_login_pwd.setText(RetentionDataUtil.getRetention().getString("userpwd", ""));    }    @Override    protected void initAdapter() {    }    @Override    protected void initData() {        type = getIntent().getStringExtra("TYPE");    }    @Override    protected void initListener() {        //微信登录        iv_login_wx.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mShareAPI.getPlatformInfo(LoginActivity.this, SHARE_MEDIA.WEIXIN, mmUMAuthListener);            }        });        //登录        tv_login.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String userName = et_login_name.getText().toString().trim();                final String passWord = et_login_pwd.getText().toString().trim();                if (TextUtils.isEmpty(userName)) {                    CommonUtil.getCommonUtil().toast("请输入登录账号");                } else if (TextUtils.isEmpty(passWord)) {                    CommonUtil.getCommonUtil().toast("请输入登录密码");                } else {                    OkGo.<String>post(ConfigUtil.LOGIN)                            .params("phone", userName)                            .params("password", passWord)                            .execute(new StringCallback() {                                @Override                                public void onStart(Request<String, ? extends Request> request) {                                    super.onStart(request);                                    dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在登录");                                }                                @Override                                public void onFinish() {                                    super.onFinish();                                    if (dialog != null) {                                        if (dialog.isShowing()) {                                            dialog.dismiss();                                            dialog = null;                                        }                                    }                                }                                @Override                                public void onError(Response<String> response) {                                    super.onError(response);                                    CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                                }                                @Override                                public void onSuccess(Response<String> response) {                                    Log.i(TAG, "onSuccess: " + response.body());                                    try {                                        LoginEntity mLoginEntity = new LoginEntity(new JSONObject(response.body()));                                        if (mLoginEntity.getStatus() == 1) {                                            RetentionDataUtil.getRetention().setString("userPhone", mLoginEntity.getPhone());                                            RetentionDataUtil.getRetention().setString("userpwd", passWord);                                            RetentionDataUtil.getRetention().setString("userId", mLoginEntity.getId());                                            RetentionDataUtil.getRetention().setString("userKey", mLoginEntity.getAuth_key());                                            RetentionDataUtil.getRetention().setString("userLevel", mLoginEntity.getLevel_name());                                            RetentionDataUtil.getRetention().setString("userName", mLoginEntity.getNick_name());                                            RetentionDataUtil.getRetention().setString("userImg", mLoginEntity.getAvatar());                                            if (TextUtils.isEmpty(type)) {                                                Intent mIntent = new Intent();                                                mIntent.setClass(mContext, WelcomeActivity.class);                                                startActivity(mIntent);                                            }                                            finish();                                        } else {                                            CommonUtil.getCommonUtil().toast(mLoginEntity.getErr_msg());                                        }                                    } catch (JSONException e) {                                        e.printStackTrace();                                    }                                }                            });                }            }        });    }    //    private UMAuthListener mmUMAuthListener = new UMAuthListener() {        @Override        public void onStart(SHARE_MEDIA share_media) {            Log.i(TAG, "onStart: 开始");        }        @Override        public void onComplete(SHARE_MEDIA share_media, int i, Map<String, String> map) {            validateWXBind(map);        }        @Override        public void onError(SHARE_MEDIA share_media, int i, Throwable throwable) {        }        @Override        public void onCancel(SHARE_MEDIA share_media, int i) {        }    };    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        UMShareAPI.get(this).onActivityResult(requestCode, resultCode, data);    }    /**     * 验证微信登录     *     * @param map     */    private void validateWXBind(Map<String, String> map) {        final String openId = map.get("openid");        OkGo.<String>post(ConfigUtil.LOGIN)                .params("app_openid", openId)                .execute(new StringCallback() {                    @Override                    public void onStart(Request<String, ? extends Request> request) {                        super.onStart(request);                        dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在验证");                    }                    @Override                    public void onError(Response<String> response) {                        super.onError(response);                        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                    }                    @Override                    public void onFinish() {                        super.onFinish();                        if (dialog != null) {                            if (dialog.isShowing()) {                                dialog.dismiss();                                dialog = null;                            }                        }                    }                    @Override                    public void onSuccess(Response<String> response) {                        try {                            LoginEntity mLoginEntity = new LoginEntity(new JSONObject(response.body()));                            if (mLoginEntity.getStatus() == 1) {                                RetentionDataUtil.getRetention().setString("userPhone", mLoginEntity.getPhone());                                RetentionDataUtil.getRetention().setString("userId", mLoginEntity.getId());                                RetentionDataUtil.getRetention().setString("userKey", mLoginEntity.getAuth_key());                                RetentionDataUtil.getRetention().setString("userLevel", mLoginEntity.getLevel_name());                                RetentionDataUtil.getRetention().setString("userName", mLoginEntity.getNick_name());                                RetentionDataUtil.getRetention().setString("userImg", mLoginEntity.getAvatar());                                if (TextUtils.isEmpty(type)) {                                    Intent mIntent = new Intent();                                    mIntent.setClass(mContext, WelcomeActivity.class);                                    startActivity(mIntent);                                }                                finish();                            } else if (mLoginEntity.getStatus() == -1) {                                popWindowDemand(openId);                            } else {                                CommonUtil.getCommonUtil().toast(mLoginEntity.getErr_msg());                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });    }    /**     * 微信登录绑定     */    private void popWindowDemand(final String openID) {        View view = LayoutInflater.from(mContext).inflate(R.layout.item_votedetail_dialog, null);        final EditText et_login_wx_1 = CommonUtil.getCommonUtil().bindView(view, R.id.et_login_wx_1);        final EditText et_login_wx_2 = CommonUtil.getCommonUtil().bindView(view, R.id.et_login_wx_2);        TextView btn_login_wx_1 = CommonUtil.getCommonUtil().bindView(view, R.id.btn_login_wx_1);        final Dialog mDialog = new Dialog(mContext, R.style.MyDialogStyle);        mDialog.setCancelable(true);        mDialog.setCanceledOnTouchOutside(true);        mDialog.setContentView(view);        mDialog.show();        Window window = mDialog.getWindow();        if (window != null) {            WindowManager.LayoutParams attributes = window.getAttributes();            attributes.height = ViewGroup.LayoutParams.WRAP_CONTENT;            attributes.width = (int) (getWindowManager().getDefaultDisplay().getWidth() * 0.8);            window.setAttributes(attributes);        }        //绑定微信        btn_login_wx_1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String userName = et_login_wx_1.getText().toString();                String userPwd = et_login_wx_2.getText().toString();                if (TextUtils.isEmpty(userName)) {                    CommonUtil.getCommonUtil().toast("请输入账号进行绑定");                } else if (TextUtils.isEmpty(userPwd)) {                    CommonUtil.getCommonUtil().toast("请输入密码进行绑定");                } else {                    if (mDialog.isShowing()) {                        mDialog.dismiss();                    }                    bindWx(userName, userPwd, openID);                }            }        });    }    /**     * 绑定微信     *     * @param userName     * @param userPwd     * @param openID     */    private void bindWx(String userName, String userPwd, String openID) {        OkGo.<String>post(ConfigUtil.LOGIN_WX)                .params("phone", userName)                .params("password", userPwd)                .params("app_openid", openID)                .execute(new StringCallback() {                    @Override                    public void onStart(Request<String, ? extends Request> request) {                        super.onStart(request);                        dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在绑定");                    }                    @Override                    public void onError(Response<String> response) {                        super.onError(response);                        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                    }                    @Override                    public void onFinish() {                        super.onFinish();                        if (dialog != null) {                            if (dialog.isShowing()) {                                dialog.dismiss();                                dialog = null;                            }                        }                    }                    @Override                    public void onSuccess(Response<String> response) {                        LoginEntity mLoginEntity = null;                        try {                            mLoginEntity = new LoginEntity(new JSONObject(response.body()));                            if (mLoginEntity.getStatus() == 1) {                                RetentionDataUtil.getRetention().setString("userPhone", mLoginEntity.getPhone());                                RetentionDataUtil.getRetention().setString("userId", mLoginEntity.getId());                                RetentionDataUtil.getRetention().setString("userKey", mLoginEntity.getAuth_key());                                RetentionDataUtil.getRetention().setString("userLevel", mLoginEntity.getLevel_name());                                RetentionDataUtil.getRetention().setString("userName", mLoginEntity.getNick_name());                                RetentionDataUtil.getRetention().setString("userImg", mLoginEntity.getAvatar());                                if (TextUtils.isEmpty(type)) {                                    Intent mIntent = new Intent();                                    mIntent.setClass(mContext, WelcomeActivity.class);                                    startActivity(mIntent);                                }                                finish();                            } else {                                CommonUtil.getCommonUtil().toast(mLoginEntity.getErr_msg());                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });    }}