package com.mzth.createcause.view.fragment.user.money;import android.graphics.Paint;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.text.Html;import android.text.TextPaint;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.ViewTreeObserver;import android.widget.ImageView;import android.widget.TextView;import com.mzth.createcause.R;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.util.CommonUtil;import org.w3c.dom.Text;/** * 股权说明 */public class StockExplainActivity extends BaseActivity {    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    private TextView tv_user_stock_explain;    @Override    protected void setActivity() {        setContentView(R.layout.activity_stock_explain);    }    @Override    protected void initView() {        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);        tv_user_stock_explain = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_stock_explain);    }    @Override    protected void initSet() {        base_title.setText("股权说明");        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.GONE);    }    @Override    protected void initAdapter() {    }    @Override    protected void initData() {        TextPaint textPaint = tv_user_stock_explain.getPaint();        String s = "天";        float textPaintWidth1 = textPaint.measureText(s);        float textPaintWidth2 = textPaint.measureText("s");        float textPaintWidth3 = textPaint.measureText("3");        float textPaintWidth4 = textPaint.measureText("\b");        //数字和英文字符长度是27   汉字是45        Log.i(TAG, "initData: 汉字" + textPaintWidth1);        Log.i(TAG, "initData: 字母" + textPaintWidth2);        Log.i(TAG, "initData: 数字" + textPaintWidth3);        Log.i(TAG, "initData: 空格" + textPaintWidth4);        String data = "每年12月22日安提诺乌斯座为纪念安提诺乌斯而命名,为托勒密的《天文学大成》中唯一个未被沿用至今的星座. 每年12月23日Darstellungen位于山猫座附近，由德国天文学家 Gottfried Kirch 命名 (每年)12月24日 虎座 每年12月25日 水位仪座 代表测量尼罗河水位的标";        //format(tv_user_stock_explain,data);        String htmls = "<font color='red'>每年12月22日安提诺乌斯座为纪念安提诺乌斯而命名，为托勒密的《天文学大成》中唯一个未被沿用至今的星座。 每年12月23日Darstellungen位于山猫座附近，由德国天文学家 Gottfried Kirch 命名 每年12月24日 虎座 每年12月25日 水位仪座 代表测量尼罗河水位的标</font>";        String newData = "";        StringBuilder mStringBuilder = new StringBuilder(newData);        StringBuilder mStringBuilderCharNum = new StringBuilder(newData);        for (int i = 0; i < data.length(); i++) {            char mChar = data.charAt(i);            String mString = String.valueOf(mChar);            if (" ".equals(mString)) {            } else if (",".equals(mString)) {                mStringBuilder.append("，");            } else if (".".equals(mString)) {                mStringBuilder.append("。");            } else if ("<".equals(mString)) {                mStringBuilder.append("《");            } else if (">".equals(mString)) {                mStringBuilder.append("》");            } else if ("(".equals(mString)) {                mStringBuilder.append("（");            } else if (")".equals(mString)) {                mStringBuilder.append("）");            } else {                mStringBuilder.append(mString);            }        }        tv_user_stock_explain.setText(mStringBuilder);    }    @Override    protected void initListener() {    }    private void format(TextView mTextView, String content) {        if (!TextUtils.isEmpty(content) && mTextView != null) {            StringBuilder mStringBuilder = new StringBuilder();            StringBuilder mStringBuilderLetter = new StringBuilder();            //获取TextView中每个字符的尺寸            TextPaint mTextViewPaint = mTextView.getPaint();            //汉子的尺寸            int measureTextChinese = (int) mTextViewPaint.measureText("字");            //英文字符和数字的长度            int measureTextLetter = (int) mTextViewPaint.measureText("a");            for (int i = 0; i < content.length(); i++) {                char mCharAt = content.charAt(i);                String mString = String.valueOf(mCharAt);                //当前字符的尺寸                int measureText = (int) mTextViewPaint.measureText(mString);                if (measureText == measureTextChinese) {                    //装字母的StringBuilder已经装完了                    if (mStringBuilderLetter.length() != 0) {                        //计算当前字母/数字的长度                        int measureStringBuilderLetter = (int) mTextViewPaint.measureText(mStringBuilderLetter.toString());                        int multiple = measureStringBuilderLetter / measureTextChinese;                        if (measureStringBuilderLetter % measureTextChinese == 0) {                        } else {                            multiple += 1;                        }                        //该字母串应该有的长度                        int should = measureTextChinese * multiple;                        while ((int) mTextViewPaint.measureText(mStringBuilderLetter.toString()) < should) {                            mStringBuilderLetter.indexOf("\b", 0);                            mStringBuilderLetter.indexOf("\b", mStringBuilderLetter.length());                        }                        //得到想要                        mStringBuilder.append(mStringBuilderLetter);                        //清空字母字符串                        mStringBuilderLetter.delete(0, mStringBuilderLetter.length());                    }                    //汉字                    mStringBuilder.append(mString);                } else if (measureText == measureTextLetter) {                    //字母                    mStringBuilderLetter.append(mString);                }            }            mTextView.setText(mStringBuilder.toString());        }        mTextView.setText("");    }}