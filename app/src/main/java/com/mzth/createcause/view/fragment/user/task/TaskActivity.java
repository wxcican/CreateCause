package com.mzth.createcause.view.fragment.user.task;import android.app.Dialog;import android.graphics.Color;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.PopupWindow;import android.widget.TextView;import com.chad.library.adapter.base.BaseQuickAdapter;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.lzy.okgo.model.Response;import com.lzy.okgo.request.base.Request;import com.mzth.createcause.R;import com.mzth.createcause.adapter.user.TaskAdapter;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.entity.user.TaskEntity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.ConfigUtil;import com.mzth.createcause.util.DividerItemDecoration;import com.mzth.createcause.util.RetentionDataUtil;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;/** * 任务区 */public class TaskActivity extends BaseActivity {    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    private RecyclerView rv_user_task;    private Dialog dialog;    private List<TaskEntity.TaskList> mTasks=new ArrayList<>();    private TaskAdapter mTaskAdapter;    @Override    protected void setActivity() {        setContentView(R.layout.activity_task);    }    @Override    protected void initView() {        rv_user_task = CommonUtil.getCommonUtil().bindView(this, R.id.rv_user_task);        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);    }    @Override    protected void initSet() {        base_title.setText("任务区");        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.GONE);    }    @Override    protected void initAdapter() {        rv_user_task.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false));        rv_user_task.addItemDecoration(new DividerItemDecoration(mContext,                LinearLayoutManager.HORIZONTAL,                CommonUtil.getCommonUtil().convertDIP(5),                Color.parseColor("#00000000")));        mTaskAdapter = new TaskAdapter(mTasks);        rv_user_task.setAdapter(mTaskAdapter);        mTaskAdapter.setEmptyView(mNoDataView);    }    @Override    protected void initData() {        initTaskData("0","-1",false,false);    }    //任务完成弹出    private void showTaskFinish() {        View view = LayoutInflater.from(mContext).inflate(R.layout.itme_show_hint, null);        TextView tv_show_hint = CommonUtil.getCommonUtil().bindView(view, R.id.tv_show_hint);        ImageView iv_show_hint = CommonUtil.getCommonUtil().bindView(view, R.id.iv_show_hint);        tv_show_hint.setText("恭喜您,任务已完成");        final PopupWindow popupWindow = CommonUtil.getCommonUtil().showPopupWindowIsCenter(mContext, tv_show_hint, (int) (mWidthPixels * 0.7), ViewGroup.LayoutParams.WRAP_CONTENT, view, getWindow());        iv_show_hint.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (popupWindow != null && popupWindow.isShowing()) {                    popupWindow.dismiss();                }            }        });    }    //private int page=0;    @Override    protected void initListener() {        /*//加载        mTaskAdapter.setOnLoadMoreListener(new BaseQuickAdapter.RequestLoadMoreListener() {            @Override            public void onLoadMoreRequested() {                page++;                initTaskData(page+"","-1",true,false);            }        },rv_user_task);*/        //去完成        mTaskAdapter.setOnItemChildClickListener(new BaseQuickAdapter.OnItemChildClickListener() {            @Override            public void onItemChildClick(BaseQuickAdapter adapter, View view, int position) {                if(mTasks.get(position).getTask_num().equals(mTasks.get(position).getTask_complete_num())){                    //已完成                    showTaskFinish();                }else {                    String task_type = mTasks.get(position).getTask_type();                    if(task_type.equals("1")){                        //发布文章                        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_NO_FINISH);                    }                    if(task_type.equals("2")){                        //分享                        RetentionDataUtil.getRetention().setString("TASK_URI",mTasks.get(position).getUrl_href());                        RetentionDataUtil.getRetention().setString("TASK_ID",mTasks.get(position).getId());                        setResult(402);                        finish();                    }                    if(task_type.equals("3")){                        //推荐                        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_NO_FINISH);                    }                }            }        });    }    private void initTaskData(String page, String type, final boolean isLoad,final boolean isRefresh){        OkGo.<String>post(ConfigUtil.TASK_LIST)                .params("user_id",userId)                .params("auth_key",userKey)                .params("task_classfy",type)                /*.params("page",page)                .params("length","15")*/                .execute(new StringCallback() {                    @Override                    public void onStart(Request<String, ? extends Request> request) {                        super.onStart(request);                        if(!isLoad&&!isRefresh){                            dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在加载");                        }                    }                    @Override                    public void onError(Response<String> response) {                        super.onError(response);                        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                    }                    @Override                    public void onFinish() {                        super.onFinish();                        if(!isLoad&&!isRefresh){                            if(dialog!=null&&dialog.isShowing()){                                dialog.dismiss();                                dialog=null;                            }                        }                    }                    @Override                    public void onSuccess(Response<String> response) {                        try {                            TaskEntity mTaskEntity=new TaskEntity(new JSONObject(response.body()));                            if(mTaskEntity.getStatus()==1){                                if(isRefresh){                                    mTasks.clear();                                }                                mTasks.addAll(mTaskEntity.getmTaskLists());                                mTaskAdapter.notifyDataSetChanged();                                /*if((mTaskEntity.getPage()+1)<mTaskEntity.getPage_total()){                                    mTaskAdapter.loadMoreComplete();                                }else {                                    mTaskAdapter.loadMoreEnd();                                }*/                            }else {                                CommonUtil.getCommonUtil().toast(mTaskEntity.getErr_msg());                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                });    }}