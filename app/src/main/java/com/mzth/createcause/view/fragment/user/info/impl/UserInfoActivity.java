package com.mzth.createcause.view.fragment.user.info.impl;import android.app.Dialog;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.support.design.widget.Snackbar;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.EditorInfo;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.luck.picture.lib.PictureSelector;import com.luck.picture.lib.config.PictureConfig;import com.luck.picture.lib.config.PictureMimeType;import com.luck.picture.lib.entity.LocalMedia;import com.lzy.okgo.OkGo;import com.lzy.okgo.callback.StringCallback;import com.lzy.okgo.model.Response;import com.lzy.okgo.request.base.Request;import com.mzth.createcause.R;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.base.custom.RadiusUserImageView;import com.mzth.createcause.entity.user.UserInfoEntity;import com.mzth.createcause.presenter.user.UserInfoPresenter;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.ConfigUtil;import com.mzth.createcause.util.RetentionDataUtil;import com.mzth.createcause.view.fragment.user.info.IUserInfoActivity;import com.squareup.picasso.Picasso;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.util.List;import static com.shuyu.gsyvideoplayer.utils.FileUtils.getPath;/** * 个人信息 */public class UserInfoActivity extends BaseActivity implements IUserInfoActivity {    // private final int FLAG_CAMERA = 100;    // private final int FLAG_CUT = 300;    //  private final int FLAG_OPEN = 200;    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    //保存    private RelativeLayout base_rl;    //头像    private LinearLayout ll_user_info_1;    //姓名    private LinearLayout ll_user_info_2;    //手机号    private LinearLayout ll_user_info_3;    //提现账号    private LinearLayout ll_user_info_4;    //所在城市    private LinearLayout ll_user_info_5;    //修改密码    private LinearLayout ll_user_info_6;    //名字    private TextView tv_user_info_1;    //手机号    private TextView tv_user_info_2;    //支付宝号    private TextView tv_user_info_3;    //地址    private TextView tv_user_info_4;    private RadiusUserImageView iv_user_info;    private final int MODIFY_NAME = 0;    private final int MODIFY_PHOTO = 1;    private PopupWindow mPopupWindow = null;    private boolean isKeep = true;    private PopupWindow mPicPop;    private ClickListener mClickListener;    private EditText et_info_show_1;    private File mCamera;    private UserInfoPresenter mUserInfoPresenter;    private Dialog dialog;    public static boolean isRefresh = false;    public static String tv3_hint;    @Override    protected void setActivity() {        setContentView(R.layout.activity_user_info);        mUserInfoPresenter = new UserInfoPresenter();        mUserInfoPresenter.initIUserInfoActivity(this);    }    @Override    protected void initView() {        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);        base_rl = CommonUtil.getCommonUtil().bindView(this, R.id.base_rl);        ll_user_info_1 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_info_1);        ll_user_info_2 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_info_2);        ll_user_info_3 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_info_3);        ll_user_info_4 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_info_4);        ll_user_info_5 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_info_5);        ll_user_info_6 = CommonUtil.getCommonUtil().bindView(this, R.id.ll_user_info_6);        tv_user_info_1 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_info_1);        tv_user_info_2 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_info_2);        tv_user_info_3 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_info_3);        tv_user_info_4 = CommonUtil.getCommonUtil().bindView(this, R.id.tv_user_info_4);        iv_user_info = CommonUtil.getCommonUtil().bindView(this, R.id.iv_user_info);    }    @Override    protected void initSet() {        base_title.setText("个人信息");        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.GONE);    }    @Override    protected void initAdapter() {    }    @Override    protected void initData() {        mUserInfoPresenter.initUserInfoData();    }    @Override    protected void initListener() {        mClickListener = new ClickListener();        ll_user_info_1.setOnClickListener(mClickListener);        ll_user_info_2.setOnClickListener(mClickListener);        ll_user_info_3.setOnClickListener(mClickListener);        ll_user_info_4.setOnClickListener(mClickListener);        ll_user_info_5.setOnClickListener(mClickListener);        ll_user_info_6.setOnClickListener(mClickListener);        base_rl.setOnClickListener(mClickListener);    }    @Override    public void getCity(String city) {        if (!TextUtils.isEmpty(city)) {            isKeep = false;            base_tv.setVisibility(View.VISIBLE);            tv_user_info_4.setText(city);        }    }    @Override    public void userInfoData(UserInfoEntity userInfoEntity) {        tv_user_info_1.setText(userInfoEntity.getNick_name());        tv_user_info_2.setText(userInfoEntity.getPhone());        if (TextUtils.isEmpty(userInfoEntity.getZhifubao())) {            tv_user_info_3.setTextColor(getResources().getColor(R.color.colorMain));            tv_user_info_3.setText("绑定支付宝账户");        } else {            tv_user_info_3.setTextColor(getResources().getColor(R.color.colorBody));            tv_user_info_3.setText("支付宝:\u2000" + userInfoEntity.getZhifubao());        }        tv_user_info_4.setText(userInfoEntity.getAddress());        String avatar = userInfoEntity.getAvatar().trim();        Glide.with(mContext)                .load(avatar)                .apply(RequestOptions.centerInsideTransform()                        .centerCrop()                        .fallback(R.drawable.icon_r_def)                        .placeholder(R.drawable.icon_r_def)                        .error(R.drawable.icon_r_def)                )                .into(iv_user_info);    }    @Override    public void onRequestStart() {        dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在加载");    }    @Override    public void onRequestFinish() {        if (dialog != null && dialog.isShowing()) {            dialog.dismiss();            dialog = null;        }    }    @Override    public void onRequestError() {        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);    }    @Override    public void onToast(String content) {        CommonUtil.getCommonUtil().toast(content);    }    private class ClickListener implements View.OnClickListener {        @Override        public void onClick(View v) {            switch (v.getId()) {                case R.id.ll_user_info_1://修改头像                    pictrre();                    break;                case R.id.ll_user_info_2://姓名                    monfiyNameOrPWD(MODIFY_NAME);                    break;                case R.id.ll_user_info_3://手机号                    //monfiyNameOrPWD(MODIFY_PHOTO);                    break;                case R.id.ll_user_info_4://提现账号                    Intent mIntent = new Intent();                    mIntent.setClass(mContext, ExtractAccountNumberActivity.class);                    startActivity(mIntent);                    break;                case R.id.ll_user_info_5://所在城市                    mUserInfoPresenter.openCityMessage(mContext);                    break;                case R.id.ll_user_info_6://修改密码                    Intent mIntentPwd = new Intent();                    mIntentPwd.setClass(mContext, ModifyPassWordActivity.class);                    startActivity(mIntentPwd);                    break;                case R.id.base_rl://保存                    OkGo.<String>post(ConfigUtil.MODIFY_NAME_VITY)                            .params("user_id", userId)                            .params("auth_key", userKey)                            .params("name", tv_user_info_1.getText().toString().trim())                            .params("city", tv_user_info_4.getText().toString().trim())                            .execute(new StringCallback() {                                @Override                                public void onStart(Request<String, ? extends Request> request) {                                    super.onStart(request);                                    dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在提交");                                }                                @Override                                public void onError(Response<String> response) {                                    super.onError(response);                                    CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                                }                                @Override                                public void onFinish() {                                    super.onFinish();                                    if (dialog != null && dialog.isShowing()) {                                        dialog.dismiss();                                        dialog = null;                                    }                                }                                @Override                                public void onSuccess(Response<String> response) {                                    try {                                        JSONObject mJSONObject = new JSONObject(response.body());                                        int status = mJSONObject.optInt("status");                                        if (status == 1) {                                            isKeep = true;                                            CommonUtil.getCommonUtil().toast(mJSONObject.optString("result"));                                        } else {                                            CommonUtil.getCommonUtil().toast(mJSONObject.optString("err_msg"));                                        }                                    } catch (JSONException e) {                                        e.printStackTrace();                                    }                                }                            });                    break;                case R.id.tv_item_show_picture_3://取消更换头像弹窗                    if (mPicPop != null && mPicPop.isShowing()) {                        mPicPop.dismiss();                    }                    break;              /*  case R.id.tv_item_show_picture_1://拍照                    if (mPicPop != null && mPicPop.isShowing()) {                        mPicPop.dismiss();                    }                    openCamera();                    break;*/             /*   case R.id.tv_item_show_picture_2://打开相册                    if (mPicPop != null && mPicPop.isShowing()) {                        mPicPop.dismiss();                    }                    Intent intent = new Intent(Intent.ACTION_PICK, null);                    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "image*//*");                    startActivityForResult(intent, FLAG_OPEN);                    break;*/                case R.id.bt_info_show_1://取消修改                    if (mPopupWindow != null && mPopupWindow.isShowing()) {                        mPopupWindow.dismiss();                    }                    break;            }        }    }    /**     * 选择图片     */    private void pictrre() {        PictureSelector.create(UserInfoActivity.this)                //选择类型                .openGallery(PictureMimeType.ofImage())                //多选或者单选PictureConfig.SINGLE                .selectionMode(PictureConfig.SINGLE)                //是否裁剪                .enableCrop(true)// 是否裁剪 true or false                .circleDimmedLayer(true)                .showCropFrame(false)// 是否显示裁剪矩形边框 圆形裁剪时建议设为false   true or false                .showCropGrid(false)// 是否显示裁剪矩形网格 圆形裁剪时建议设为false    true or false                //是否压缩                .compress(true)                //压缩方式                .compressMode(PictureConfig.SYSTEM_COMPRESS_MODE)                //结果回调码                .forResult(PictureConfig.CHOOSE_REQUEST);    }    //修改名字    private void monfiyNameOrPWD(final int type) {        View view = LayoutInflater.from(mContext).inflate(R.layout.item_show_modify, null);        //取消        TextView bt_info_show_1 = CommonUtil.getCommonUtil().bindView(view, R.id.bt_info_show_1);        //确认        TextView bt_info_show_2 = CommonUtil.getCommonUtil().bindView(view, R.id.bt_info_show_2);        //title        TextView tv_info_show_1 = CommonUtil.getCommonUtil().bindView(view, R.id.tv_info_show_1);        //提示        TextView tv_info_show_2 = CommonUtil.getCommonUtil().bindView(view, R.id.tv_info_show_3);        //小title        TextView tv_info_show_3 = CommonUtil.getCommonUtil().bindView(view, R.id.tv_info_show_3);        //输入框        et_info_show_1 = CommonUtil.getCommonUtil().bindView(view, R.id.et_info_show_1);        if (type == MODIFY_NAME) {            tv_info_show_1.setText("昵称修改");            tv_info_show_2.setText("温馨提示：您正在修改您的昵称！");            tv_info_show_3.setText("姓名:");            et_info_show_1.setHint("请输入您的姓名");        } else if (type == MODIFY_PHOTO) {            tv_info_show_1.setText("手机号修改");            tv_info_show_2.setText("温馨提示：您正在修改您的手机号！");            tv_info_show_3.setText("手机号:");            et_info_show_1.setHint("请输入您的手机号");            et_info_show_1.setInputType(EditorInfo.TYPE_CLASS_NUMBER);        }        mPopupWindow = CommonUtil.getCommonUtil().showPopupWindowIsCenter(mContext,                ll_user_info_1,                (int) (mWidthPixels * 0.8),                ViewGroup.LayoutParams.WRAP_CONTENT,                view,                getWindow()        );        bt_info_show_1.setOnClickListener(mClickListener);        bt_info_show_2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String modify = et_info_show_1.getText().toString().trim();                if (TextUtils.isEmpty(modify)) {                    if (type == MODIFY_NAME) {                        CommonUtil.getCommonUtil().toast("请输入您的名字");                    } else if (type == MODIFY_PHOTO) {                        CommonUtil.getCommonUtil().toast("请输入您的手机号");                    }                } else {                    isKeep = false;                    base_tv.setVisibility(View.VISIBLE);                    if (type == MODIFY_NAME) {                        tv_user_info_1.setText(modify);                    } else if (type == MODIFY_PHOTO) {                        tv_user_info_2.setText(modify);                    }                    mPopupWindow.dismiss();                }            }        });    }    //返回提示    @Override    public void back(View view) {        if (isKeep) {            super.back(view);        } else {            Snackbar snackbar = Snackbar.make(ll_user_info_1, "您有修改的信息未保存，是否继续退出？", Snackbar.LENGTH_SHORT)                    //设置SnackBar动作提示                    .setAction("确定", new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            finish();                        }                    })                    //设置SnackBar动作提示颜色                    .setActionTextColor(Color.parseColor("#ff0000"))                    //设置SnackBar弹出时间（ms）                    .setDuration(3000);            //SnackBar弹出            snackbar.show();        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            switch (requestCode) {                case PictureConfig.CHOOSE_REQUEST:                    // 图片选择结果回调                    List<LocalMedia> selectList = PictureSelector.obtainMultipleResult(data);                    // 例如 LocalMedia 里面返回三种path                    // 1.media.getPath(); 为原图path                    // 2.media.getCutPath();为裁剪后path，需判断media.isCut();是否为true                    // 3.media.getCompressPath();为压缩后path，需判断media.isCompressed();是否为true                    // 如果裁剪并压缩了，以取压缩路径为准，因为是先裁剪后压缩的                    for (int i = 0; i < selectList.size(); i++) {                        // Log.i(TAG, "onActivityResult: "+selectList.get(i).getCompressPath());                        File mFile = new File(selectList.get(i).getCompressPath());                        iv_user_info.setImageURI(Uri.fromFile(mFile));                        OkGo.<String>post(ConfigUtil.MODIFY_AVATAR)                                .params("user_id", userId)                                .params("auth_key", userKey)                                .params("avatar", mFile)                                .execute(new StringCallback() {                                    @Override                                    public void onStart(Request<String, ? extends Request> request) {                                        super.onStart(request);                                        dialog = CommonUtil.getCommonUtil().ejectLaoding(mContext, "正在上传");                                    }                                    @Override                                    public void onError(Response<String> response) {                                        super.onError(response);                                        CommonUtil.getCommonUtil().toast(ConfigUtil.HINT_OVERTIME);                                    }                                    @Override                                    public void onFinish() {                                        super.onFinish();                                        if (dialog != null && dialog.isShowing()) {                                            dialog.dismiss();                                            dialog = null;                                        }                                    }                                    @Override                                    public void onSuccess(Response<String> response) {                                        try {                                            JSONObject mJSONObject = new JSONObject(response.body());                                            int status = mJSONObject.optInt("status");                                            if (status == 1) {                                                RetentionDataUtil.getRetention().setString("userImg",mJSONObject.optString("result"));                                            } else {                                                CommonUtil.getCommonUtil().toast(mJSONObject.optString("err_msg"));                                            }                                        } catch (JSONException e) {                                            e.printStackTrace();                                        }                                    }                                });                    }                    break;            }        }    }    @Override    protected void onResume() {        super.onResume();        if (isRefresh) {            isRefresh = false;            if (tv_user_info_3 != null) {                tv_user_info_3.setTextColor(getResources().getColor(R.color.colorBody));                tv_user_info_3.setText(tv3_hint);            }        }    }}