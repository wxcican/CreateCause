package com.mzth.createcause.view.fragment.user.eaaaymessage;import android.content.Intent;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.luck.picture.lib.PictureSelector;import com.luck.picture.lib.config.PictureConfig;import com.luck.picture.lib.config.PictureMimeType;import com.luck.picture.lib.entity.LocalMedia;import com.mzth.createcause.R;import com.mzth.createcause.adapter.user.ReleaseEditAdapter;import com.mzth.createcause.base.BaseActivity;import com.mzth.createcause.entity.user.EssayEditEntity;import com.mzth.createcause.util.CommonUtil;import com.mzth.createcause.util.RetentionDataUtil;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.List;public class ReleaseEditActivity extends BaseActivity {    private TextView base_title;    private ImageView base_iv;    private TextView base_tv;    //保存    private RelativeLayout base_rl;    private List<EssayEditEntity> mEssayEditEntitys = new ArrayList<>();    private RecyclerView rv_user_release_edit;    private ReleaseEditAdapter mReleaseEditAdapter;    private String releaseEdit;    //添加图片    private LinearLayout ll_release_edit_add_picture;    //添加文字    private LinearLayout ll_release_edit_add_text;    private ImageView mImageView;    private TextView mTextView;    private EssayEditEntity essayEditEntity;    private String videoPath="";    @Override    protected void setActivity() {        setContentView(R.layout.activity_release_edit);    }    @Override    protected void initView() {        base_title = CommonUtil.getCommonUtil().bindView(this, R.id.base_title);        base_iv = CommonUtil.getCommonUtil().bindView(this, R.id.base_iv);        base_tv = CommonUtil.getCommonUtil().bindView(this, R.id.base_tv);        base_rl = CommonUtil.getCommonUtil().bindView(this, R.id.base_rl);        rv_user_release_edit = CommonUtil.getCommonUtil().bindView(this, R.id.rv_user_release_edit);        ll_release_edit_add_picture = CommonUtil.getCommonUtil().bindView(this, R.id.ll_release_edit_add_picture);        ll_release_edit_add_text = CommonUtil.getCommonUtil().bindView(this, R.id.ll_release_edit_add_text);    }    @Override    protected void initSet() {        releaseEdit = getIntent().getStringExtra("releaseEdit");        if (releaseEdit.equals(RELEASE_ESSAY)) {            base_title.setText("文章编辑");        }        if (releaseEdit.equals(RELEASE_VIDEO)) {            base_title.setText("视频编辑");        }        base_iv.setVisibility(View.GONE);        base_tv.setVisibility(View.VISIBLE);        base_tv.setText("保存");    }    @Override    protected void initAdapter() {        mReleaseEditAdapter = new ReleaseEditAdapter(mEssayEditEntitys);        rv_user_release_edit.setLayoutManager(new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false));        rv_user_release_edit.setAdapter(mReleaseEditAdapter);    }    @Override    protected void initListener() {        //保存        base_rl.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                StringBuffer mStringBuffer = new StringBuffer();                for (int i = 0; i < mEssayEditEntitys.size(); i++) {                    EssayEditEntity entity = mEssayEditEntitys.get(i);                    String textContent = entity.getTextContent();                    String imagePath = entity.getImagePath();                  //  String videoPath = entity.getVideoPath();                    if (!TextUtils.isEmpty(textContent)) {                        mStringBuffer.append(textContent + "<br>");                    }                    if (!TextUtils.isEmpty(imagePath)) {                        mStringBuffer.append("<img src=" + imagePath + " /><br>");                    }                 /*   if (!TextUtils.isEmpty(videoPath)) {                        mStringBuffer.append(videoPath + "<br>");                    }*/                }                String content = mStringBuffer.toString();                if (TextUtils.isEmpty(content)) {                    setResult(303);                } else {                    RetentionDataUtil.getRetention().setString("RELEASE_CONTENT", content);                    if(!TextUtils.isEmpty(videoPath)){                        RetentionDataUtil.getRetention().setString("RELEASE_CONTENT_VIDEO", videoPath);                    }                    setResult(302);                }                finish();            }        });        //添加图片模块        ll_release_edit_add_picture.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                addImgModul();            }        });        //添加文字模块        ll_release_edit_add_text.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                addTextModul();            }        });        //删除模块        mReleaseEditAdapter.setOnDeleteModularListener(new ReleaseEditAdapter.OnDeleteModularListener() {            @Override            public void onDeleteModeuar(int position) {                delModul(position);            }        });        //向下移动模块        mReleaseEditAdapter.setOnDownModularListener(new ReleaseEditAdapter.OnDownModularListener() {            @Override            public void onDownModeuar(int position) {                downModular(position);            }        });        //向上移动        mReleaseEditAdapter.setOnUpModularListener(new ReleaseEditAdapter.OnUpModularListener() {            @Override            public void onUpModeuar(int position) {                upModular(position);            }        });        //选择图片        mReleaseEditAdapter.setOnSelectImageListener(new ReleaseEditAdapter.OnSelectImageListener() {            @Override            public void onSelectImage(ImageView imageView, int position) {                mImageView = imageView;                essayEditEntity = mEssayEditEntitys.get(position);                PictureSelector.create(ReleaseEditActivity.this)                        //选择类型                        .openGallery(PictureMimeType.ofImage())                        //多选或者单选PictureConfig.SINGLE                        .selectionMode(PictureConfig.SINGLE)                        //是否裁剪                        .enableCrop(true)// 是否裁剪 true or false                        .showCropFrame(false)// 是否显示裁剪矩形边框 圆形裁剪时建议设为false   true or false                        .showCropGrid(false)// 是否显示裁剪矩形网格 圆形裁剪时建议设为false    true or false                        //是否压缩                        .compress(true)                        //压缩方式                        .compressMode(PictureConfig.SYSTEM_COMPRESS_MODE)                        //结果回调码                        .forResult(PictureConfig.CHOOSE_REQUEST);            }        });        //选择视频        mReleaseEditAdapter.setOnSelectVideoListener(new ReleaseEditAdapter.OnSelectVideoListener() {            @Override            public void onSelectVideo(TextView imageView, int position) {                mTextView = imageView;                PictureSelector.create(ReleaseEditActivity.this)                        .openGallery(PictureMimeType.ofVideo())                        .selectionMode(PictureConfig.SINGLE)                        .previewVideo(true)                        .isCamera(true)                        .videoQuality(1)                        .recordVideoSecond(15)                        .forResult(PictureConfig.CHOOSE_REQUEST);            }        });    }    @Override    protected void initData() {        if (releaseEdit.equals(RELEASE_ESSAY)) {            //文章            EssayEditEntity mTextEssayEditEntity = new EssayEditEntity(EssayEditEntity.ESSAY_TEXT);            mTextEssayEditEntity.setTextDel(true);            mTextEssayEditEntity.setTextoDown(true);            mTextEssayEditEntity.setTextUp(false);            mEssayEditEntitys.add(mTextEssayEditEntity);            EssayEditEntity mVideEssayEditEntity = new EssayEditEntity(EssayEditEntity.ESSAY_IMAGE);            mVideEssayEditEntity.setImageDel(true);            mVideEssayEditEntity.setImageDown(false);            mVideEssayEditEntity.setImageUp(true);            mEssayEditEntitys.add(mVideEssayEditEntity);            mReleaseEditAdapter.notifyDataSetChanged();        }        if (releaseEdit.equals(RELEASE_VIDEO)) {            //视频            EssayEditEntity mEssayEditEntityVIDEO = new EssayEditEntity(EssayEditEntity.ESSAY_VIDEO);            mEssayEditEntityVIDEO.setVideoDel(false);            mEssayEditEntityVIDEO.setVideoDown(false);            mEssayEditEntityVIDEO.setVideoUp(false);            EssayEditEntity mEssayEditEntityText = new EssayEditEntity(EssayEditEntity.ESSAY_TEXT);            mEssayEditEntityText.setTextDel(true);            mEssayEditEntityText.setTextoDown(true);            mEssayEditEntityText.setTextUp(false);            EssayEditEntity mEssayEditEntityImg = new EssayEditEntity(EssayEditEntity.ESSAY_IMAGE);            mEssayEditEntityImg.setImageDel(true);            mEssayEditEntityImg.setImageDown(false);            mEssayEditEntityImg.setImageUp(true);            mEssayEditEntitys.add(mEssayEditEntityVIDEO);            mEssayEditEntitys.add(mEssayEditEntityText);            mEssayEditEntitys.add(mEssayEditEntityImg);            mReleaseEditAdapter.notifyDataSetChanged();        }    }    /**     * 添加图片模块     */    private void addImgModul() {        EssayEditEntity mVideEssayEditEntity = new EssayEditEntity(EssayEditEntity.ESSAY_IMAGE);        mEssayEditEntitys.add(mVideEssayEditEntity);        refreshBtnStatus();    }    /**     * 添加文字模块     */    private void addTextModul() {        EssayEditEntity mVideEssayEditEntity = new EssayEditEntity(EssayEditEntity.ESSAY_TEXT);        mEssayEditEntitys.add(mVideEssayEditEntity);        refreshBtnStatus();    }    /**     * 删除模块     *     * @param position     */    private void delModul(int position) {        mEssayEditEntitys.remove(position);        refreshBtnStatus();    }    /**     * 向下移动模块     *     * @param position     */    private void downModular(int position) {        Collections.swap(mEssayEditEntitys, position, position + 1);        refreshBtnStatus();    }    /**     * 向上移动     *     * @param position     */    private void upModular(int position) {        Collections.swap(mEssayEditEntitys, position - 1, position);        refreshBtnStatus();    }    /**     * 刷新删除按钮状态     */    private void refreshBtnStatus() {        if (releaseEdit.equals(RELEASE_ESSAY)) {            if (mEssayEditEntitys.size() > 1) {                //不只一个的时候                for (int i = 0; i < mEssayEditEntitys.size(); i++) {                    EssayEditEntity editEntity = mEssayEditEntitys.get(i);                    if (editEntity.getItemType() == EssayEditEntity.ESSAY_TEXT) {                        editEntity.setTextDel(true);                        editEntity.setTextoDown(true);                        editEntity.setTextUp(true);                    }                    if (editEntity.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                        editEntity.setImageDel(true);                        editEntity.setImageDown(true);                        editEntity.setImageUp(true);                    }                }                //初始化第一个的状态                EssayEditEntity essayEditEntityState = mEssayEditEntitys.get(0);                if (essayEditEntityState.getItemType() == EssayEditEntity.ESSAY_TEXT) {                    essayEditEntityState.setTextDel(true);                    essayEditEntityState.setTextoDown(true);                    essayEditEntityState.setTextUp(false);                }                if (essayEditEntityState.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                    essayEditEntityState.setImageDel(true);                    essayEditEntityState.setImageDown(true);                    essayEditEntityState.setImageUp(false);                }                //初始化最后一个的状态                EssayEditEntity essayEditEntityEnd = mEssayEditEntitys.get(mEssayEditEntitys.size() - 1);                if (essayEditEntityEnd.getItemType() == EssayEditEntity.ESSAY_TEXT) {                    essayEditEntityEnd.setTextDel(true);                    essayEditEntityEnd.setTextoDown(false);                    essayEditEntityEnd.setTextUp(true);                }                if (essayEditEntityEnd.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                    essayEditEntityEnd.setImageDel(true);                    essayEditEntityEnd.setImageDown(false);                    essayEditEntityEnd.setImageUp(true);                }            } else if (mEssayEditEntitys.size() == 1) {                //只有一个的时候                if (mEssayEditEntitys.size() > 0) {                    EssayEditEntity essayEditEntityO = mEssayEditEntitys.get(0);                    if (essayEditEntityO.getItemType() == EssayEditEntity.ESSAY_TEXT) {                        essayEditEntityO.setTextDel(true);                        essayEditEntityO.setTextoDown(false);                        essayEditEntityO.setTextUp(false);                    }                    if (essayEditEntityO.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                        essayEditEntityO.setImageDel(true);                        essayEditEntityO.setImageDown(false);                        essayEditEntityO.setImageUp(false);                    }                }            }        }        if (releaseEdit.equals(RELEASE_VIDEO)) {            if (mEssayEditEntitys.size() > 2) {                for (int i = 1; i < mEssayEditEntitys.size(); i++) {                    EssayEditEntity editEntity = mEssayEditEntitys.get(i);                    if (editEntity.getItemType() == EssayEditEntity.ESSAY_TEXT) {                        editEntity.setTextDel(true);                        editEntity.setTextoDown(true);                        editEntity.setTextUp(true);                    }                    if (editEntity.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                        editEntity.setImageDel(true);                        editEntity.setImageDown(true);                        editEntity.setImageUp(true);                    }                }                //初始化第一个的状态                EssayEditEntity essayEditEntityState = mEssayEditEntitys.get(1);                if (essayEditEntityState.getItemType() == EssayEditEntity.ESSAY_TEXT) {                    essayEditEntityState.setTextDel(true);                    essayEditEntityState.setTextoDown(true);                    essayEditEntityState.setTextUp(false);                }                if (essayEditEntityState.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                    essayEditEntityState.setImageDel(true);                    essayEditEntityState.setImageDown(true);                    essayEditEntityState.setImageUp(false);                }                //初始化最后一个的状态                EssayEditEntity essayEditEntityEnd = mEssayEditEntitys.get(mEssayEditEntitys.size() - 1);                if (essayEditEntityEnd.getItemType() == EssayEditEntity.ESSAY_TEXT) {                    essayEditEntityEnd.setTextDel(true);                    essayEditEntityEnd.setTextoDown(false);                    essayEditEntityEnd.setTextUp(true);                }                if (essayEditEntityEnd.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                    essayEditEntityEnd.setImageDel(true);                    essayEditEntityEnd.setImageDown(false);                    essayEditEntityEnd.setImageUp(true);                }            } else {                if (mEssayEditEntitys.size() > 1) {                    EssayEditEntity essayEditEntityO = mEssayEditEntitys.get(1);                    if (essayEditEntityO.getItemType() == EssayEditEntity.ESSAY_TEXT) {                        essayEditEntityO.setTextDel(true);                        essayEditEntityO.setTextoDown(false);                        essayEditEntityO.setTextUp(false);                    }                    if (essayEditEntityO.getItemType() == EssayEditEntity.ESSAY_IMAGE) {                        essayEditEntityO.setImageDel(true);                        essayEditEntityO.setImageDown(false);                        essayEditEntityO.setImageUp(false);                    }                }            }        }        mReleaseEditAdapter.notifyDataSetChanged();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            switch (requestCode) {                case PictureConfig.CHOOSE_REQUEST:                    // 图片选择结果回调                    List<LocalMedia> selectList = PictureSelector.obtainMultipleResult(data);                    // 例如 LocalMedia 里面返回三种path                    // 1.media.getPath(); 为原图path                    // 2.media.getCutPath();为裁剪后path，需判断media.isCut();是否为true                    // 3.media.getCompressPath();为压缩后path，需判断media.isCompressed();是否为true                    // 如果裁剪并压缩了，以取压缩路径为准，因为是先裁剪后压缩的                    for (int i = 0; i < selectList.size(); i++) {                        LocalMedia localMedia = selectList.get(i);                        int pictureType = localMedia.getMimeType();                        if (pictureType == PictureMimeType.ofImage()) {                            String imgPaht = localMedia.getCompressPath();                            Glide.with(mContext)                                    .load(imgPaht)                                    .into(mImageView);                            ReleaseUtil.getReleaseUtil().actionRequestImg(ReleaseEditActivity.this, userId, userKey, imgPaht);                            ReleaseUtil.getReleaseUtil().setOnCoverSelectListener(new ReleaseUtil.OnCoverSelectListener() {                                @Override                                public void onCoverSelect(String path) {                                    essayEditEntity.setImagePath(path);                                }                            });                        }                        if (pictureType == PictureMimeType.ofVideo()) {                            String path = localMedia.getPath();                            File mFile = new File(path);                            mTextView.setText(mFile.getName());                            ReleaseUtil.getReleaseUtil().actionRequestImg(ReleaseEditActivity.this, userId, userKey, path);                            ReleaseUtil.getReleaseUtil().setOnCoverSelectListener(new ReleaseUtil.OnCoverSelectListener() {                                @Override                                public void onCoverSelect(String path) {                                    Log.i(TAG, "onCoverSelect: "+path);                                    //essayEditEntity.setVideoPath(path);                                    videoPath=path;                                }                            });                        }                    }                    break;            }        }    }}